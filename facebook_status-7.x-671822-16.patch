From 6c758022c41aa1d4984f13785f7dff7dc3fcbc32 Mon Sep 17 00:00:00 2001
From: Bob Vincent <bobvin@pillars.net>
Date: Sat, 19 Mar 2011 19:34:55 -0400
Subject: [PATCH] Issue #671822 by dorien, pribeh, IceCreamYou, mehtatejas, ven7ura, pillarsdotnet: Upgrade to 7.x

First pass through Coder Upgrade -- expect breakage.
---
 api.php                                            |   14 +-
 facebook_status.author-pane.inc                    |    4 +-
 facebook_status.info                               |   39 +++-
 facebook_status.install                            |   69 +++--
 facebook_status.module                             |  319 +++++++++++++-------
 .../content_types/facebook_status_stream.inc       |    9 +-
 includes/facebook_status.preprocess.inc            |   25 +-
 includes/utility/facebook_status.admin.inc         |   49 ++--
 includes/utility/facebook_status.ahah.inc          |   12 +-
 includes/utility/facebook_status.announce.inc      |   32 +-
 includes/utility/facebook_status.contexts.inc      |   12 +-
 includes/utility/facebook_status.conversation.inc  |    2 +-
 includes/utility/facebook_status.edit.inc          |   80 +++---
 includes/utility/facebook_status.form.inc          |   45 ++--
 includes/utility/facebook_status.generate.inc      |   12 +-
 includes/views/facebook_status.views.inc           |    6 +-
 ...facebook_status_views_handler_field_created.inc |    5 +-
 .../facebook_status_views_handler_field_cross.inc  |    4 +-
 ...cebook_status_views_handler_field_cross_pic.inc |   11 +-
 .../facebook_status_views_handler_field_delete.inc |    4 +-
 .../facebook_status_views_handler_field_edit.inc   |    4 +-
 ...facebook_status_views_handler_field_message.inc |    2 +-
 ...ok_status_views_handler_field_recipient_pic.inc |    2 +-
 .../facebook_status_views_handler_field_repost.inc |    9 +-
 ...facebook_status_views_handler_field_respond.inc |   16 +-
 .../facebook_status_views_handler_filter_own.inc   |    2 +-
 ...ook_status_views_handler_filter_participant.inc |    2 +-
 .../facebook_status_views_plugin_row_rss.inc       |    8 +-
 .../facebook_status_tags/facebook_status_tags.info |   16 +-
 .../facebook_status_tags.install                   |   16 +-
 .../facebook_status_tags.module                    |  173 +++++++----
 .../facebook_status_tags.rules.inc                 |   17 +-
 .../views/facebook_status_tags.views.inc           |    6 +-
 .../views/facebook_status_tags.views_default.inc   |    4 +-
 ...us_tags_views_handler_argument_has_this_tag.inc |    4 +-
 ...tags_views_handler_argument_has_this_tag_id.inc |   74 +++---
 ...k_status_tags_views_handler_field_all_terms.inc |    6 +-
 ...ook_status_tags_views_handler_field_message.inc |    2 +-
 ...cebook_status_tags_views_handler_field_name.inc |    2 +-
 ...ok_status_tags_views_handler_filter_has_tag.inc |    4 +-
 ...atus_tags_views_handler_filter_has_this_tag.inc |    4 +-
 submodules/fbss_activity/fbss_activity.info        |    3 +-
 submodules/fbss_activity/fbss_activity.module      |   38 +--
 submodules/fbss_comments/fbss_comments.edit.inc    |   17 +-
 submodules/fbss_comments/fbss_comments.info        |   10 +-
 submodules/fbss_comments/fbss_comments.install     |   16 +-
 submodules/fbss_comments/fbss_comments.module      |  216 +++++++++-----
 submodules/fbss_comments/fbss_comments.views.inc   |    6 +-
 .../fbss_comments_views_handler_field_cc.inc       |    2 +-
 .../fbss_comments_views_handler_field_cc2.inc      |    2 +-
 ...ss_comments_views_handler_field_comment_box.inc |    2 +-
 submodules/fbss_flag/fbss_flag.flag.inc            |    2 +-
 submodules/fbss_flag/fbss_flag.info                |    5 +-
 submodules/fbss_flag/fbss_flag.install             |   11 +-
 submodules/fbss_flag/fbss_flag.module              |   20 +-
 submodules/fbss_mollom/fbss_mollom.info            |    4 +-
 submodules/fbss_mollom/fbss_mollom.module          |    4 +-
 submodules/fbss_pathauto/fbss_pathauto.info        |    3 +-
 submodules/fbss_pathauto/fbss_pathauto.module      |   29 ++-
 submodules/fbss_rules/fbss_rules.info              |    6 +-
 submodules/fbss_rules/fbss_rules.module            |    4 +-
 submodules/fbss_rules/fbss_rules.rules.inc         |   79 ++++--
 .../fbss_rules/fbss_rules.rules_defaults.inc       |   63 ++---
 submodules/fbss_twitter/fbss_twitter.info          |    5 +-
 submodules/fbss_twitter/fbss_twitter.install       |    2 +-
 submodules/fbss_twitter/fbss_twitter.module        |   20 +-
 submodules/fbss_userpoints/fbss_userpoints.info    |    5 +-
 submodules/fbss_userpoints/fbss_userpoints.install |    2 +-
 submodules/fbss_userpoints/fbss_userpoints.module  |   29 +-
 templates/facebook-status-item.tpl.php             |   36 +--
 views-view-row-rss.tpl.php                         |   26 ++-
 71 files changed, 1109 insertions(+), 684 deletions(-)

diff --git a/api.php b/api.php
index 7007927..9461fc4 100644
--- a/api.php
+++ b/api.php
@@ -101,12 +101,12 @@ function hook_facebook_status_context_info() {
   return array(
     'user' => array(
       'title' => t('User profiles'),
-      'description' => t('If a profile is currently being viewed, then the stream belongs to the owner of that profile.') .' '.
+      'description' => t('If a profile is currently being viewed, then the stream belongs to the owner of that profile.') . ' ' .
         t('Otherwise, the stream belongs to the current user.'),
       'handler' => 'facebook_status_user_context',
       'view' => 'facebook_status_user_stream',
       'weight' => 9999,
-      'file' => $path .'/includes/utility/facebook_status.contexts.inc',
+      'file' => $path . '/includes/utility/facebook_status.contexts.inc',
     ),
     'node' => array(
       'title' => t('Nodes'),
@@ -114,7 +114,7 @@ function hook_facebook_status_context_info() {
       'handler' => 'facebook_status_node_context',
       'view' => 'facebook_status_node_stream',
       'weight' => 0,
-      'file' => $path .'/includes/utility/facebook_status.contexts.inc',
+      'file' => $path . '/includes/utility/facebook_status.contexts.inc',
     ),
   );
 }
@@ -128,7 +128,11 @@ function hook_facebook_status_context_info() {
  */
 function hook_facebook_status_delete($sid) {
   if (module_exists('facebook_status_tags')) {
-    db_query("DELETE FROM {facebook_status_tags} WHERE sid = %d", $sid);
+    // TODO Please review the conversion of this statement to the D7 database API syntax.
+    /* db_query("DELETE FROM {facebook_status_tags} WHERE sid = %d", $sid) */
+    db_delete('facebook_status_tags')
+  ->condition('sid', $sid)
+  ->execute();
   }
 }
 
@@ -171,7 +175,7 @@ function hook_facebook_status_save($status, $context, $edit) {
 function hook_facebook_status_refresh_selectors($recipient, $type) {
   //Automatically update all instances of the view that is displayed for this context.
   $context = facebook_status_determine_context($type);
-  return array('.view-id-'. $context['view']);
+  return array('.view-id-' . $context['view']);
 }
 
 /**
diff --git a/facebook_status.author-pane.inc b/facebook_status.author-pane.inc
index f09200e..1043c23 100644
--- a/facebook_status.author-pane.inc
+++ b/facebook_status.author-pane.inc
@@ -7,7 +7,7 @@
  */
 
 /**
- * Implementation of hook_preprocess_author_pane().
+ * Implements hook_preprocess_author_pane().
  */
 function facebook_status_preprocess_author_pane(&$variables) {
   $variables += array(
@@ -26,6 +26,6 @@ function facebook_status_preprocess_author_pane(&$variables) {
     //Just the status, safe but with no filters run over it.
     $variables['facebook_status_status'] = check_plain($status->message);
     //The formatted time the status was submitted.
-    $variables['facebook_status_time'] = theme('facebook_status_time', $status->created);
+    $variables['facebook_status_time'] = theme('facebook_status_time', array('time' => $status->created));
   }
 }
diff --git a/facebook_status.info b/facebook_status.info
index 6e25229..85ee5c5 100644
--- a/facebook_status.info
+++ b/facebook_status.info
@@ -2,4 +2,41 @@ name = Facebook-style Statuses
 description = "Creates context-sensitive social streams."
 package = Facebook-style Statuses
 dependencies[] = views
-core = 6.x
+core = 7.x
+
+files[] = api.php
+files[] = facebook_status.author-pane.inc
+files[] = facebook_status.install
+files[] = facebook_status.module
+files[] = includes/facebook_status.preprocess.inc
+files[] = content_types/facebook_status_stream.inc
+files[] = utility/facebook_status.access.inc
+files[] = utility/facebook_status.admin.inc
+files[] = utility/facebook_status.ahah.inc
+files[] = utility/facebook_status.announce.inc
+files[] = utility/facebook_status.contexts.inc
+files[] = utility/facebook_status.conversation.inc
+files[] = utility/facebook_status.edit.inc
+files[] = utility/facebook_status.form.inc
+files[] = utility/facebook_status.generate.inc
+files[] = views/facebook_status.views.inc
+files[] = views/facebook_status.views_default.inc
+files[] = handlers/facebook_status_views_handler_argument_flagged_user.inc
+files[] = handlers/facebook_status_views_handler_argument_participant.inc
+files[] = handlers/facebook_status_views_handler_field_created.inc
+files[] = handlers/facebook_status_views_handler_field_cross.inc
+files[] = handlers/facebook_status_views_handler_field_cross_pic.inc
+files[] = handlers/facebook_status_views_handler_field_delete.inc
+files[] = handlers/facebook_status_views_handler_field_edit.inc
+files[] = handlers/facebook_status_views_handler_field_message.inc
+files[] = handlers/facebook_status_views_handler_field_recipient.inc
+files[] = handlers/facebook_status_views_handler_field_recipient_pic.inc
+files[] = handlers/facebook_status_views_handler_field_repost.inc
+files[] = handlers/facebook_status_views_handler_field_respond.inc
+files[] = handlers/facebook_status_views_handler_filter_autotype.inc
+files[] = handlers/facebook_status_views_handler_filter_flagged_user.inc
+files[] = handlers/facebook_status_views_handler_filter_latest_only.inc
+files[] = handlers/facebook_status_views_handler_filter_not_own.inc
+files[] = handlers/facebook_status_views_handler_filter_own.inc
+files[] = handlers/facebook_status_views_handler_filter_participant.inc
+files[] = handlers/facebook_status_views_plugin_row_rss.inc
diff --git a/facebook_status.install b/facebook_status.install
index 6b15828..7678de8 100644
--- a/facebook_status.install
+++ b/facebook_status.install
@@ -6,7 +6,7 @@
  */
 
 /**
- * Implementation of hook_schema().
+ * Implements hook_schema().
  */
 function facebook_status_schema() {
   $schema = array();
@@ -108,14 +108,15 @@ function _facebook_status_contexts_schema() {
 }
 
 /**
- * Implementation of hook_install().
+ * Implements hook_install().
  */
 function facebook_status_install() {
-  drupal_install_schema('facebook_status');
+  // TODO The drupal_(un)install_schema functions are called automatically in D7.
+  // drupal_install_schema('facebook_status')
 }
 
 /**
- * Implementation of hook_update_N().
+ * Implements hook_update_N().
  */
 function facebook_status_update_6300() {
   // Remove old variables.
@@ -136,38 +137,38 @@ function facebook_status_update_6300() {
   $ret = array();
 
   // Drop current indexes.
-  db_drop_index($ret, 'facebook_status', 'uid');
-  db_drop_index($ret, 'facebook_status', 'pid');
-  db_drop_index($ret, 'facebook_status', 'status_time');
+  db_drop_index('facebook_status', 'uid');
+  db_drop_index('facebook_status', 'pid');
+  db_drop_index('facebook_status', 'status_time');
 
   // Rename fields and add 'type'.
-  db_change_field($ret, 'facebook_status', 'uid', 'recipient', array(
+  db_change_field('facebook_status', 'uid', 'recipient', array(
     'type' => 'int',
     'unsigned' => TRUE,
     'not null' => TRUE,
     'default' => 0,
     'description' => 'The ID of the entity that received the status message.',
   ));
-  db_change_field($ret, 'facebook_status', 'pid', 'sender', array(
+  db_change_field('facebook_status', 'pid', 'sender', array(
     'type' => 'int',
     'unsigned' => TRUE,
     'not null' => TRUE,
     'default' => 0,
     'description' => 'The User ID of the user who created the status message.',
   ));
-  db_change_field($ret, 'facebook_status', 'status_time', 'created', array(
+  db_change_field('facebook_status', 'status_time', 'created', array(
     'type' => 'int',
     'unsigned' => TRUE,
     'not null' => TRUE,
     'default' => 0,
     'description' => 'The time the status message was saved.',
   ));
-  db_change_field($ret, 'facebook_status', 'status', 'message', array(
+  db_change_field('facebook_status', 'status', 'message', array(
     'type' => 'text',
     'not null' => TRUE,
     'description' => 'The status message.',
   ));
-  db_add_field($ret, 'facebook_status', 'type', array(
+  db_add_field('facebook_status', 'type', array(
     'type' => 'varchar',
     'length' => 255,
     'not null' => TRUE,
@@ -176,18 +177,19 @@ function facebook_status_update_6300() {
   ));
 
   // Add indexes again.
-  db_add_index($ret, 'facebook_status', 'recipient', array('recipient'));
-  db_add_index($ret, 'facebook_status', 'sender', array('sender'));
-  db_add_index($ret, 'facebook_status', 'created', array('created'));
-  db_add_index($ret, 'facebook_status', 'type', array('type'));
+  db_add_index('facebook_status', 'recipient', array('recipient'));
+  db_add_index('facebook_status', 'sender', array('sender'));
+  db_add_index('facebook_status', 'created', array('created'));
+  db_add_index('facebook_status', 'type', array('type'));
 
   // Update the type field in existing records.
-  $ret[] = update_sql("UPDATE {facebook_status} SET type = 'user'");
+  // TODO update_sql has been removed. Use the database API for any schema or data changes.
+  $ret[] = array() /* update_sql("UPDATE {facebook_status} SET type = 'user'") */;
 
   // Create the contexts table.
   if (!db_table_exists('facebook_status_contexts')) {
     $schema = _facebook_status_contexts_schema();
-    db_create_table($ret, 'facebook_status_contexts', $schema['facebook_status_contexts']);
+    db_create_table('facebook_status_contexts', $schema['facebook_status_contexts']);
   }
 
   // Update tokens used in Pathauto.
@@ -227,8 +229,9 @@ function facebook_status_update_6300() {
     '[status-delete]',
     '[created]',
   );
+  // TODO Please convert this statement to the D7 database API syntax.
   $result = db_query("SELECT name FROM {variable} WHERE name LIKE 'pathauto\\_facebook\\_status\\_%%'");
-  while ($variable = db_fetch_object($result)) { 
+  while ($variable = db_fetch_object($result)) {
     $name = $variable->name;
     if ($value = variable_get($name, NULL)) {
       $value = str_replace($old, $new, $value);
@@ -247,7 +250,7 @@ function facebook_status_update_6300() {
   $modules_to_install = array();
   // If the Activity integration was in use in the 2.x branch, enable the fbss_activity submodule.
   if (module_exists('activity') && !module_exists('fbss_activity')) {
-    $count = db_result(db_query("SELECT COUNT(*) FROM {activity} WHERE type = 'facebook_status'"));
+    $count = db_query("SELECT COUNT(*) FROM {activity} WHERE type = :type", array(':type' => 'facebook_status'))->fetchField();
     if ($count > 0) {
       $modules_to_install[] = 'fbss_activity';
     }
@@ -255,7 +258,7 @@ function facebook_status_update_6300() {
 
   // If the Flag integration was in use in the 2.x branch, enable the fbss_flag submodule.
   if (module_exists('flag') && !module_exists('fbss_flag')) {
-    $count = db_result(db_query("SELECT COUNT(*) FROM {flags} WHERE content_type = 'facebook_status'"));
+    $count = db_query("SELECT COUNT(*) FROM {flags} WHERE content_type = :content_type", array(':content_type' => 'facebook_status'))->fetchField();
     if ($count > 0) {
       $modules_to_install[] = 'fbss_flag';
     }
@@ -263,7 +266,7 @@ function facebook_status_update_6300() {
 
   // If the Mollom integration was in use in the 2.x branch, enable the fbss_mollom submodule.
   if (module_exists('mollom') && db_table_exists('mollom_form') && !module_exists('fbss_mollom')) {
-    $count = db_result(db_query("SELECT COUNT(*) FROM {mollom_form} WHERE module = 'facebook_status'"));
+    $count = db_query("SELECT COUNT(*) FROM {mollom_form} WHERE module = :module", array(':module' => 'facebook_status'))->fetchField();
     if ($count > 0) {
       $modules_to_install[] = 'fbss_mollom';
     }
@@ -272,7 +275,8 @@ function facebook_status_update_6300() {
   // If the Pathauto integration was in use in the 2.x branch, enable the fbss_pathauto submodule.
   if (module_exists('pathauto') && !module_exists('fbss_pathauto')) {
     // We check variables named with "fbss_pathauto" instead of "facebook_status" because we already converted them above.
-    $count = db_result(db_query("SELECT COUNT(*) FROM {variable} WHERE name LIKE 'pathauto\\_fbss\\_pathauto\\_%%'"));
+    // TODO Please convert this statement to the D7 database API syntax.
+    $count = db_query("SELECT COUNT(*) FROM {variable} WHERE name LIKE 'pathauto\\_fbss\\_pathauto\\_%%'")->fetchField();
     if ($count > 0) {
       $modules_to_install[] = 'fbss_pathauto';
     }
@@ -280,8 +284,10 @@ function facebook_status_update_6300() {
 
   // If the Rules integration was in use in the 2.x branch, enable the fbss_rules submodule.
   if (module_exists('rules') && !module_exists('fbss_rules')) {
-    $count = (int) db_result(db_query("SELECT COUNT(*) FROM {rules_rules} WHERE name LIKE 'facebook\\_status%%'"));
-    $count += (int) db_result(db_query("SELECT COUNT(*) FROM {rules_sets} WHERE name LIKE 'facebook\\_status%%'"));
+    // TODO Please convert this statement to the D7 database API syntax.
+    $count = (int) db_query("SELECT COUNT(*) FROM {rules_rules} WHERE name LIKE 'facebook\\_status%%'")->fetchField();
+    // TODO Please convert this statement to the D7 database API syntax.
+    $count += (int) db_query("SELECT COUNT(*) FROM {rules_sets} WHERE name LIKE 'facebook\\_status%%'")->fetchField();
     if ($count > 0) {
       $modules_to_install[] = 'fbss_rules';
     }
@@ -295,21 +301,26 @@ function facebook_status_update_6300() {
 
   // If the Userpoints integration was in use in the 2.x branch, enable the fbss_userpoints submodule.
   if (module_exists('userpoints') && !module_exists('fbss_userpoints')) {
-    $count = db_result(db_query("SELECT COUNT(*) FROM {userpoints_txn} WHERE operation LIKE 'facebook\\_status%%'"));
+    // TODO Please convert this statement to the D7 database API syntax.
+    $count = db_query("SELECT COUNT(*) FROM {userpoints_txn} WHERE operation LIKE 'facebook\\_status%%'")->fetchField();
     if ($count > 0) {
       $modules_to_install[] = 'fbss_userpoints';
     }
   }
 
   drupal_install_modules($modules_to_install);
-  return $ret;
+  // hook_update_N() no longer returns a $ret array. Instead, return
+  // nothing or a translated string indicating the update ran successfully.
+  // See http://drupal.org/node/224333#update_sql.
+  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
 }
 
 /**
- * Implementation of hook_uninstall().
+ * Implements hook_uninstall().
  */
 function facebook_status_uninstall() {
-  drupal_uninstall_schema('facebook_status');
+  // TODO The drupal_(un)install_schema functions are called automatically in D7.
+  // drupal_uninstall_schema('facebook_status')
   variable_del('facebook_status_default_text');
   variable_del('facebook_status_hide_length');
   variable_del('facebook_status_block_view');
diff --git a/facebook_status.module b/facebook_status.module
index 9351c36..f39afb2 100644
--- a/facebook_status.module
+++ b/facebook_status.module
@@ -20,26 +20,26 @@ define("FACEBOOK_STATUS_OVERRIDE_TIMER", 10);
 //===============
 
 /**
- * Implementation of hook_help().
+ * Implements hook_help().
  */
 function facebook_status_help($path, $arg) {
   if ($path == 'admin/help#facebook_status') {
-    return t('Creates social streams of "status updates" for users or other entities.') .' '.
+    return t('Creates social streams of "status updates" for users or other entities.') . ' ' .
       t('Please see the <a href="@project">Project page</a> or <a href="@docs">documentation</a> for more information.',
         array(
-          '@project' => 'http://drupal.org/project/facebook_status',
-          '@docs' => 'http://drupal.org/node/421128',
-        )
+      '@project' => 'http://drupal.org/project/facebook_status',
+      '@docs' => 'http://drupal.org/node/421128',
+    )
       );
   }
 }
 
 /**
- * Implementation of hook_menu().
+ * Implements hook_menu().
  */
 function facebook_status_menu() {
   $items = array();
-  $items['admin/settings/facebook_status'] = array(
+  $items['admin/config/facebook_status'] = array(
     'title' => 'Facebook-style Statuses',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('facebook_status_admin'),
@@ -47,13 +47,13 @@ function facebook_status_menu() {
     'description' => 'Allows administrators to adjust settings for Facebook-style Statuses.',
     'file' => 'includes/utility/facebook_status.admin.inc',
   );
-  $items['admin/settings/facebook_status/basic'] = array(
+  $items['admin/config/facebook_status/basic'] = array(
     'title' => 'Basic',
     'type' => MENU_DEFAULT_LOCAL_TASK,
     'access arguments' => array('administer Facebook-style Statuses settings'),
     'weight' => -1,
   );
-  $items['admin/settings/facebook_status/advanced'] = array(
+  $items['admin/config/facebook_status/advanced'] = array(
     'title' => 'Advanced',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('facebook_status_admin_advanced'),
@@ -62,7 +62,7 @@ function facebook_status_menu() {
     'type' => MENU_LOCAL_TASK,
     'file' => 'includes/utility/facebook_status.admin.inc',
   );
-  $items['admin/settings/facebook_status/contexts'] = array(
+  $items['admin/config/facebook_status/contexts'] = array(
     'title' => 'Contexts',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('facebook_status_admin_contexts'),
@@ -147,30 +147,42 @@ function facebook_status_menu() {
  */
 function facebook_status_share_page() {
   $view = variable_get('facebook_status_share_view', 'facebook_status');
-  return theme('facebook_status_form_display', $GLOBALS['user'], 'user', $view);
+  return theme('facebook_status_form_display', array('recipient' => $GLOBALS['user'], 'type' => 'user', 'view' => $view));
 }
 
 /**
- * Implementation of hook_block().
+ * Implements hook_block_info().
  */
-function facebook_status_block($op = 'list', $delta = 0, $edit = NULL) {
-  if ($op == 'list') {
+function facebook_status_block_info() {
+  if (TRUE) {
     $block['facebook_status']['info'] = t('Facebook-style Statuses');
     $block['facebook_status']['visibility'] = 0;
     $block['facebook_status']['pages'] = 'statuses/share';
     return $block;
   }
-  elseif ($op == 'view' && $delta == 'facebook_status') {
+}
+
+/**
+ * Implements hook_block_view().
+ */
+function facebook_status_block_view($delta) {
+  if (TRUE && $delta == 'facebook_status') {
     $context = facebook_status_determine_context();
     $view = FALSE;
     if (!variable_get('facebook_status_block_view', 0) && !empty($context['view'])) {
       unset($context['view']);
     }
     $block['subject'] = t('Status');
-    $block['content'] = theme('facebook_status_form_display', $context);
+    $block['content'] = theme('facebook_status_form_display', array('recipient' => $context));
     return $block;
   }
-  elseif ($op == 'configure' && $delta == 'facebook_status') {
+}
+
+/**
+ * Implements hook_block_configure().
+ */
+function facebook_status_block_configure($delta) {
+  if (TRUE && $delta == 'facebook_status') {
     $form['facebook_status'] = array(
       '#type' => 'fieldset',
       '#title' => t('Facebook-style Statuses Settings'),
@@ -186,7 +198,13 @@ function facebook_status_block($op = 'list', $delta = 0, $edit = NULL) {
     );
     return $form;
   }
-  elseif ($op == 'save' && $delta == 'facebook_status') {
+}
+
+/**
+ * Implements hook_block_save().
+ */
+function facebook_status_block_save($delta, $edit) {
+  if (TRUE && $delta == 'facebook_status') {
     if (isset($edit['facebook_status'])) {
       variable_set('facebook_status_block_view', $edit['facebook_status']['facebook_status_block_view']);
     }
@@ -194,31 +212,73 @@ function facebook_status_block($op = 'list', $delta = 0, $edit = NULL) {
 }
 
 /**
- * Implementation of hook_perm().
+ * Implements hook_block().
  */
-function facebook_status_perm() {
+function facebook_status_block_OLD($op = 'list', $delta = 0, $edit = NULL) { }
+
+/**
+ * Implements hook_permission().
+ */
+function facebook_status_permission() {
   return array(
-    'administer Facebook-style Statuses settings',
-    'delete all statuses',
-    'delete own statuses',
-    'delete status messages on own profile',
-    'delete status messages on own nodes',
-    'edit all statuses',
-    'edit own statuses',
-    'post status messages to other streams',
-    'send messages to all users at once',
-    'update and view own stream',
-    'view all statuses',
+    'administer Facebook-style Statuses settings' => array(
+      'title' => t('administer Facebook-style Statuses settings'),
+      'description' => t('TODO Add a description for \'administer Facebook-style Statuses settings\''),
+    ),
+    'delete all statuses' => array(
+      'title' => t('delete all statuses'),
+      'description' => t('TODO Add a description for \'delete all statuses\''),
+    ),
+    'delete own statuses' => array(
+      'title' => t('delete own statuses'),
+      'description' => t('TODO Add a description for \'delete own statuses\''),
+    ),
+    'delete status messages on own profile' => array(
+      'title' => t('delete status messages on own profile'),
+      'description' => t('TODO Add a description for \'delete status messages on own profile\''),
+    ),
+    'delete status messages on own nodes' => array(
+      'title' => t('delete status messages on own nodes'),
+      'description' => t('TODO Add a description for \'delete status messages on own nodes\''),
+    ),
+    'edit all statuses' => array(
+      'title' => t('edit all statuses'),
+      'description' => t('TODO Add a description for \'edit all statuses\''),
+    ),
+    'edit own statuses' => array(
+      'title' => t('edit own statuses'),
+      'description' => t('TODO Add a description for \'edit own statuses\''),
+    ),
+    'post status messages to other streams' => array(
+      'title' => t('post status messages to other streams'),
+      'description' => t('TODO Add a description for \'post status messages to other streams\''),
+    ),
+    'send messages to all users at once' => array(
+      'title' => t('send messages to all users at once'),
+      'description' => t('TODO Add a description for \'send messages to all users at once\''),
+    ),
+    'update and view own stream' => array(
+      'title' => t('update and view own stream'),
+      'description' => t('TODO Add a description for \'update and view own stream\''),
+    ),
+    'view all statuses' => array(
+      'title' => t('view all statuses'),
+      'description' => t('TODO Add a description for \'view all statuses\''),
+    ),
   );
 }
 
 /**
- * Implementation of hook_user().
+ * Implements hook_user_cancel().
  */
-function facebook_status_user($op, &$edit, &$account, $category = NULL) {
-  if ($op == 'delete') {
+function facebook_status_user_cancel($edit, $account, $method) {
+  if (TRUE) {
     // Remove abandoned statuses from the database on user account deletion.
-    db_query("DELETE FROM {facebook_status} WHERE sender = %d OR (recipient = %d AND type = 'user')", $account->uid, $account->uid);
+    // TODO Please review the conversion of this statement to the D7 database API syntax.
+    /* db_query("DELETE FROM {facebook_status} WHERE sender = %d OR (recipient = %d AND type = 'user')", $account->uid, $account->uid) */
+    db_delete('facebook_status')
+    ->where('sender = %d OR (recipient = %d AND type = ' user ')',  )
+  ->execute();
     // NOTE: modules that integrate with FBSS should implement hook_user()
     // themselves instead of relying on hook_facebook_status_delete().
     // Administrators who use the interface to create actions that occur when a
@@ -228,8 +288,14 @@ function facebook_status_user($op, &$edit, &$account, $category = NULL) {
     // API function instead of a direct database call by utilizing the Queue
     // API.
   }
-  elseif ($op == 'view' && variable_get('facebook_status_profile', 1)) {
-    $value = theme('facebook_status_form_display', $account, 'user');
+}
+
+/**
+ * Implements hook_user_view().
+ */
+function facebook_status_user_view($account, $view_mode) {
+  if (TRUE && variable_get('facebook_status_profile', 1)) {
+    $value = theme('facebook_status_form_display', array('recipient' => $account, 'type' => 'user'));
     // Don't show this section if there's nothing there or the user doesn't have permission to see it.
     if (empty($value)) {
       return;
@@ -253,7 +319,12 @@ function facebook_status_user($op, &$edit, &$account, $category = NULL) {
 }
 
 /**
- * Implementation of hook_init().
+ * Implements hook_user().
+ */
+function facebook_status_user_OLD($op, &$edit, &$account, $category = NULL) { }
+
+/**
+ * Implements hook_init().
  */
 function facebook_status_init() {
   // Don't clear the default text on first focus if the default text was manually set in the URL.
@@ -263,23 +334,23 @@ function facebook_status_init() {
     $undefault = $undefault || ($rs->sender != $GLOBALS['user']->uid && $rs->message);
   }
   drupal_add_js(array('facebook_status' => array(
-    'autofocus' => (
+      'autofocus' => (
       (arg(0) == 'statuses' && arg(1) == 'share') ||
       (arg(0) == 'statuses' && is_numeric(arg(1)) && arg(2) == 'edit') ||
       (arg(0) == 'statuses' && arg(1) == 'conversation')
     ),
-    'noautoclear' => (
+      'noautoclear' => (
       $undefault ||
       (arg(0) == 'statuses' && is_numeric(arg(1)) && arg(2) == 'edit')
     ),
-    'maxlength' => variable_get('facebook_status_length', 140),
-    'hideLength' => variable_get('facebook_status_hide_length', 0),
-    'refreshLink' => (bool) variable_get('facebook_status_refresh', 0)
-  )), 'setting');
+      'maxlength' => variable_get('facebook_status_length', 140),
+      'hideLength' => variable_get('facebook_status_hide_length', 0),
+      'refreshLink' => (bool) variable_get('facebook_status_refresh', 0),
+    )), array('type' => 'setting', 'scope' => JS_DEFAULT));
 }
 
 /**
- * Implementation of hook_link().
+ * Implements hook_link().
  */
 function facebook_status_link($type, $status) {
   if ($type != 'facebook_status') {
@@ -289,14 +360,14 @@ function facebook_status_link($type, $status) {
   $links = array();
   if (facebook_status_user_access('edit', $status)) {
     $links['edit'] = array(
-      'href' => 'statuses/'. $status->sid .'/edit',
+      'href' => 'statuses/' . $status->sid . '/edit',
       'title' => t('edit'),
       'attributes' => array('class' => 'facebook-status-edit-link facebook-status-action-link'),
     );
   }
   if (facebook_status_user_access('delete', $status)) {
     $links['delete'] = array(
-      'href' => 'statuses/'. $status->sid .'/delete',
+      'href' => 'statuses/' . $status->sid . '/delete',
       'title' => t('delete'),
       'attributes' => array('class' => 'facebook-status-delete-link facebook-status-action-link'),
     );
@@ -322,7 +393,7 @@ function facebook_status_link($type, $status) {
         $title = t('discuss');
       }
       $links['respond'] = array(
-        'href' => 'statuses/conversation/'. $status->sender .','. $user->uid,
+        'href' => 'statuses/conversation/' . $status->sender . ',' . $user->uid,
         'title' => $title,
         'attributes' => array('class' => 'facebook-status-respond-link facebook-status-action-link'),
       );
@@ -332,7 +403,10 @@ function facebook_status_link($type, $status) {
     $links['share'] = array(
       'href' => 'statuses/share',
       'title' => t('share'),
-      'query' => array('sid' => $status->mid, 'destination' => $_GET['q']),
+      'query' => array(
+        'sid' => $status->mid,
+        'destination' => $_GET['q'],
+      ),
       'attributes' => array('class' => 'facebook-status-share-link facebook-status-action-link'),
     );
   }
@@ -340,12 +414,12 @@ function facebook_status_link($type, $status) {
 }
 
 /**
- * Implementation of hook_theme().
+ * Implements hook_theme().
  */
 function facebook_status_theme($existing, $type, $theme, $path) {
   return array(
     'facebook_status_item' => array(
-      'arguments' => array(
+      'variables' => array(
         'status' => NULL,
         'options' => array(),
       ),
@@ -353,7 +427,7 @@ function facebook_status_theme($existing, $type, $theme, $path) {
       'file' => 'includes/facebook_status.preprocess.inc',
     ),
     'facebook_status_form_display' => array(
-      'arguments' => array(
+      'variables' => array(
         'recipient' => NULL,
         'type' => 'user',
         'view' => NULL,
@@ -361,14 +435,12 @@ function facebook_status_theme($existing, $type, $theme, $path) {
       'file' => 'includes/utility/facebook_status.form.inc',
     ),
     'facebook_status_time' => array(
-      'arguments' => array(
-        'time' => time(),
+      'variables' => array(
+        'time' => REQUEST_TIME,
       ),
     ),
     'facebook_status_admin_contexts' => array(
-      'arguments' => array(
-        'form' => NULL,
-      ),
+      'render element' => 'form',
       'file' => 'includes/utility/facebook_status.admin.inc',
     ),
   );
@@ -406,18 +478,19 @@ function facebook_status_show($status, $options = array()) {
  *   If the status was submitted within the last 3 days, returns a "time ago"
  *   date. If not, returns a normal (small) date. If zero, returns FALSE.
  */
-function theme_facebook_status_time($time) {
+function theme_facebook_status_time($variables) {
+  $time = $variables['time'];
   if (!$time) {
     return FALSE;
   }
-  if (time() - $time < 60) {
+  if (REQUEST_TIME - $time < 60) {
     return t('a moment ago');
   }
-  elseif (time() - $time < 60 * 60 * 24 * 3) {
-    return t('!time ago', array('!time' => format_interval(time() - $time, 1)));
+  elseif (REQUEST_TIME - $time < 60 * 60 * 24 * 3) {
+    return t('!time ago', array('!time' => format_interval(REQUEST_TIME - $time, 1)));
   }
   else {
-    return format_date($time, 'small');
+    return format_date($time, 'short');
   }
 }
 
@@ -486,10 +559,10 @@ function facebook_status_get_statuses($senders = array(), $recipients = array(),
   $args = array_merge(array($type), $senders, $recipients);
   $query = "SELECT * FROM {facebook_status} WHERE created <> 0 AND type = '%s'";
   if (!empty($senders)) {
-    $query .= " AND sender IN (". db_placeholders($senders) .")";
+    $query .= " AND sender IN (" . db_placeholders($senders) . ")";
   }
   if (!empty($recipients)) {
-    $query .= " AND recipient IN (". db_placeholders($recipients) .")";
+    $query .= " AND recipient IN (" . db_placeholders($recipients) . ")";
   }
   $query .= " ORDER BY created DESC, sid DESC";
   $result = ($total > 0 ? $fn($query, $args, 0, $total) : $fn($query, $args));
@@ -517,9 +590,9 @@ function facebook_status_has_status($recipient_id = NULL, $type = 'user', $sende
   global $user;
   $recipient_id = (empty($recipient_id) ? $user->uid : $recipient_id);
   if (!empty($sender_id)) {
-    return db_result(db_query("SELECT COUNT(sid) FROM {facebook_status} WHERE type = '%s' AND recipient = %d AND sender = %d", $type, $recipient_id, $sender_id));
+    return db_query("SELECT COUNT(sid) FROM {facebook_status} WHERE type = :type AND recipient = :recipient AND sender = :sender", array(':type' => $type, ':recipient' => $recipient_id, ':sender' => $sender_id))->fetchField();
   }
-  return db_result(db_query("SELECT COUNT(sid) FROM {facebook_status} WHERE type = '%s' AND recipient = %d", $type, $recipient_id));
+  return db_query("SELECT COUNT(sid) FROM {facebook_status} WHERE type = :type AND recipient = :recipient", array(':type' => $type, ':recipient' => $recipient_id))->fetchField();
 }
 
 /**
@@ -530,8 +603,13 @@ function facebook_status_has_status($recipient_id = NULL, $type = 'user', $sende
  * @return
  *   A status object containing sid, sender, recipient, type, created, message.
  */
-function facebook_status_load($sid) {
-  return db_fetch_object(db_query("SELECT * FROM {facebook_status} WHERE sid = %d", $sid));
+function facebook_status_load($sids) {
+  foreach ($sids as $nid => &$sid) {
+    $node_additions = db_fetch_object(db_query("SELECT * FROM {facebook_status} WHERE sid = :sid", array(':sid' => $sid)));
+    foreach ($node_additions as $property => &$value) {
+      $sid->$property = $value;
+    }
+  }
 }
 
 /**
@@ -558,7 +636,7 @@ function facebook_status_determine_context($type = NULL) {
     // The user context is our base case, so we never end up with no context.
     foreach ($contexts as $context) {
       if (!empty($context['file']) && file_exists($context['file'])) {
-        require_once $context['file'];
+        require_once DRUPAL_ROOT . '/' . $context['file'];
       }
       // Make sure the parent class is always loaded.
       if (empty($context['parent'])) {
@@ -576,7 +654,7 @@ function facebook_status_determine_context($type = NULL) {
   elseif (isset($contexts[$type])) {
     $context = $contexts[$type];
     if (!empty($context['file']) && file_exists($context['file'])) {
-      require_once $context['file'];
+      require_once DRUPAL_ROOT . '/' . $context['file'];
     }
     // Make sure the parent class is always loaded.
     if (empty($context['parent'])) {
@@ -649,7 +727,11 @@ function facebook_status_delete_status($sid) {
     module_invoke_all('facebook_status', 'fbss_deleted', $sid);
   }
   module_invoke_all('facebook_status_delete', $sid);
-  db_query("DELETE FROM {facebook_status} WHERE sid = %d", $sid);
+  // TODO Please review the conversion of this statement to the D7 database API syntax.
+  /* db_query("DELETE FROM {facebook_status} WHERE sid = %d", $sid) */
+  db_delete('facebook_status')
+  ->condition('sid', $sid)
+  ->execute();
 }
 
 /**
@@ -679,7 +761,7 @@ function facebook_status_save_status($recipient, $type, $message, $sender = NULL
   $sender = (empty($sender) ? $GLOBALS['user'] : $sender);
   $context = facebook_status_determine_context($type);
   $recipient_id = $context['handler']->recipient_id($recipient);
-  $time = time();
+  $time = REQUEST_TIME;
   $message = trim($message);
   // Merge in defaults.
   $options += array(
@@ -706,7 +788,16 @@ function facebook_status_save_status($recipient, $type, $message, $sender = NULL
     // we assume the user didn't mean to post the first one.
     if ($time - $status->created < FACEBOOK_STATUS_OVERRIDE_TIMER && $type = 'user' && $sender->uid == $recipient_id && $options['timed override']) {
       $sql = "UPDATE {facebook_status} SET message = '%s', created = %d WHERE sid = %d ORDER BY sid DESC";
-      db_query($sql, $message, $time, $status->sid);
+      // TODO Please review the conversion of this statement to the D7 database API syntax.
+      /* db_query($sql, $message, $time, $status->sid) */
+      db_update('facebook_status')
+  ->fields(array(
+        'message' => $message,
+        'created' => $time,
+      ))
+  ->condition('sid', $status->sid)
+  ->condition('DER BY sid DESC', '')
+  ->execute();
       $object->sid = $status->sid;
       $edit = TRUE;
     }
@@ -721,7 +812,7 @@ function facebook_status_save_status($recipient, $type, $message, $sender = NULL
     module_invoke_all('facebook_status_save', $object, $context, $edit);
     // Trigger integration. Don't call if the status is blank because usually nothing interesting is happening.
     if (module_exists('trigger') && !empty($message)) {
-      $op = 'fbss_submitted_'. $type;
+      $op = 'fbss_submitted_' . $type;
       if ($type == 'user') {
         $op .= ($recipient_id == $sender->uid ? '_self' : '_other');
       }
@@ -756,7 +847,7 @@ function _facebook_status_element_sort($a, $b) {
  */
 function _facebook_status_run_filter($status) {
   if (variable_get('facebook_status_filter', 'none') != 'none') {
-    return check_markup($status, variable_get('facebook_status_filter', 'none'), FALSE);
+    return check_markup($status, variable_get('facebook_status_filter', 'none'), $langcode = '' /* TODO Set this variable. */, FALSE);
   }
   return check_plain($status);
 }
@@ -770,9 +861,15 @@ function _facebook_status_run_filter($status) {
  *   A status object.
  */
 function _facebook_status_get_status_fast($uid) {
-  $status = db_fetch_object(db_query("SELECT * FROM {facebook_status} WHERE sender = %d AND recipient = %d AND type = 'user' ORDER BY sid DESC", $uid, $uid));
+  $status = db_fetch_object(db_query("SELECT * FROM {facebook_status} WHERE sender = :sender AND recipient = :recipient AND type = :type ORDER BY sid DESC", array(':sender' => $uid, ':recipient' => $uid, ':type' => 'user')));
   if (!$status) {
-    $status = (object) array('sender' => $uid, 'recipient' => $uid, 'message' => '', 'created' => 0, 'type' => 'user');
+    $status = (object) array(
+      'sender' => $uid,
+      'recipient' => $uid,
+      'message' => '',
+      'created' => 0,
+      'type' => 'user',
+    );
   }
   return $status;
 }
@@ -788,7 +885,7 @@ function _facebook_status_get_status_fast($uid) {
 function _facebook_status_user_load($uid) {
   static $accounts = array();
   if (!isset($accounts[$uid])) {
-    $accounts[$uid] = user_load(array('uid' => $uid));
+    $accounts[$uid] = user_load($uid);
   }
   return $accounts[$uid];
 }
@@ -804,7 +901,7 @@ function _facebook_status_user_load($uid) {
 function _facebook_status_user_load_by_name($name) {
   static $accounts = array();
   if (!isset($accounts[$name])) {
-    $accounts[$name] = user_load(array('name' => $name));
+    $accounts[$name] = array_shift(user_load_multiple(array(), array('name' => $name)));
   }
   return $accounts[$name];
 }
@@ -814,19 +911,19 @@ function _facebook_status_user_load_by_name($name) {
 //==========================
 
 /**
- * Implementation of hook_facebook_status_context_info().
+ * Implements hook_facebook_status_context_info().
  */
 function facebook_status_facebook_status_context_info() {
   $path = drupal_get_path('module', 'facebook_status');
   return array(
     'user' => array(
       'title' => t('User profiles'),
-      'description' => t('If a profile is currently being viewed, then the stream belongs to the owner of that profile.') .' '.
+      'description' => t('If a profile is currently being viewed, then the stream belongs to the owner of that profile.') . ' ' .
         t('Otherwise, the stream belongs to the current user.'),
       'handler' => 'facebook_status_user_context',
       'view' => 'facebook_status_stream',
       'weight' => 9999,
-      'file' => $path .'/includes/utility/facebook_status.contexts.inc',
+      'file' => $path . '/includes/utility/facebook_status.contexts.inc',
     ),
     'node' => array(
       'title' => t('Nodes'),
@@ -834,7 +931,7 @@ function facebook_status_facebook_status_context_info() {
       'handler' => 'facebook_status_node_context',
       'view' => 'facebook_status_stream',
       'weight' => -1,
-      'file' => $path .'/includes/utility/facebook_status.contexts.inc',
+      'file' => $path . '/includes/utility/facebook_status.contexts.inc',
     ),
     'og' => array(
       'title' => t('Organic Groups'),
@@ -844,7 +941,7 @@ function facebook_status_facebook_status_context_info() {
       'dependencies' => array('og'),
       'view' => 'facebook_status_stream',
       'weight' => -50,
-      'file' => $path .'/includes/utility/facebook_status.contexts.inc',
+      'file' => $path . '/includes/utility/facebook_status.contexts.inc',
     ),
   );
 }
@@ -854,18 +951,16 @@ function facebook_status_facebook_status_context_info() {
 //======================
 
 /**
- * Implementation of hook_hook_info().
+ * Implements hook_trigger_info().
  */
-function facebook_status_hook_info() {
+function facebook_status_trigger_info() {
   $info = array(
     'facebook_status' => array(
-      'facebook_status' => array(
-        'fbss_deleted' => array(
-          'runs when' => t('A status has been deleted'),
-        ),
-        'fbss_edited' => array(
-          'runs when' => t('A status has been edited'),
-        ),
+      'facebook_status_fbss_deleted' => array(
+        'label' => t('A status has been deleted'),
+      ),
+      'facebook_status_fbss_edited' => array(
+        'label' => t('A status has been edited'),
       ),
     ),
   );
@@ -881,7 +976,7 @@ function facebook_status_hook_info() {
       );
     }
     else {
-      $info['facebook_status']['facebook_status']['fbss_submitted_'. $type ] = array(
+      $info['facebook_status']['facebook_status']['fbss_submitted_' . $type] = array(
         'runs when' => t('A user has posted a new status to a stream of type %type', array('%type' => $type)),
       );
     }
@@ -890,9 +985,9 @@ function facebook_status_hook_info() {
 }
 
 /**
- * Implementation of hook_facebook_status().
+ * Implements hook_facebook_status().
  * or
- * Implementation of hook_trigger_name().
+ * Implements hook_trigger_name().
  */
 function facebook_status_facebook_status($op, $a1, $context = NULL) {
   if (!in_array($op, array('fbss_deleted', 'fbss_edited')) && strpos($op, 'fbss_submitted') !== 0) {
@@ -930,7 +1025,7 @@ function facebook_status_facebook_status($op, $a1, $context = NULL) {
 //====================
 
 /**
- * Implementation of hook_token_list().
+ * Implements hook_token_list().
  */
 function facebook_status_token_list($type = 'all') {
   if ($type == 'facebook_status') {
@@ -963,7 +1058,7 @@ function facebook_status_token_list($type = 'all') {
 }
 
 /**
- * Implementation of hook_token_values().
+ * Implements hook_token_values().
  */
 function facebook_status_token_values($type, $data = NULL, $options = array()) {
   if ($type != 'facebook_status' || empty($data)) {
@@ -979,15 +1074,15 @@ function facebook_status_token_values($type, $data = NULL, $options = array()) {
   $edit = '';
   $delete = '';
   if (facebook_status_user_access('edit', $status)) {
-    $edit = '<span class="facebook-status-edit-link facebook-status-action-link">'. l(t('Edit'), 'statuses/'. $status->sid .'/edit') .'</span>';
+    $edit = '<span class="facebook-status-edit-link facebook-status-action-link">' . l(t('Edit'), 'statuses/' . $status->sid . '/edit') . '</span>';
   }
   if (facebook_status_user_access('delete', $status)) {
-    $delete = '<span class="facebook-status-delete-link facebook-status-action-link">'.  l(t('Delete'), 'statuses/'. $status->sid .'/delete') .'</span>';
+    $delete = '<span class="facebook-status-delete-link facebook-status-action-link">' .  l(t('Delete'), 'statuses/' . $status->sid . '/delete') . '</span>';
   }
   $sender = _facebook_status_user_load($status->sender);
   $recipient = $context['handler']->load_recipient($status->recipient);
   $values = array(
-    'sender-themed' => theme('username', $sender),
+    'sender-themed' => theme('username', array('account' => $sender)),
     'sender-name' => check_plain($sender->name),
     'sender-name-raw' => $sender->name,
     'sender-uid' => $sender->uid,
@@ -1000,12 +1095,12 @@ function facebook_status_token_values($type, $data = NULL, $options = array()) {
     'message-unformatted' => check_plain($status->message),
     'message-formatted' => $message_formatted,
     'message-raw' => $status->message,
-    'status-themed' => theme('facebook_status_item', $status),
+    'status-themed' => theme('facebook_status_item', array('status' => $status)),
     'status-id' => $status->sid,
     'status-edit' => $edit,
     'status-delete' => $delete,
     'status-comment-count' => (module_exists('fbss_comments')) ? fbss_comments_count_comments($status->sid) : 0,
-    'created' => format_date($status->created, 'small'),
+    'created' => format_date($status->created, 'short'),
   );
   $values += token_get_date_token_values($status->created, 'created-');
   return $values;
@@ -1016,12 +1111,12 @@ function facebook_status_token_values($type, $data = NULL, $options = array()) {
 //====================
 
 /**
- * Implementation of hook_views_api().
+ * Implements hook_views_api().
  */
 function facebook_status_views_api() {
   return array(
     'api' => 2,
-    'path' => drupal_get_path('module', 'facebook_status') .'/includes/views',
+    'path' => drupal_get_path('module', 'facebook_status') . '/includes/views',
   );
 }
 
@@ -1030,8 +1125,8 @@ function facebook_status_views_api() {
  * and other themes.
  */
 function facebook_status_display_user_picture($account) {
-  drupal_add_css(drupal_get_path('module', 'facebook_status') .'/resources/facebook_status.css');
-  return theme('user_picture', $account);
+  drupal_add_css(drupal_get_path('module', 'facebook_status') . '/resources/facebook_status.css');
+  return theme('user_picture', array('account' => $account));
 }
 
 //============================
@@ -1039,7 +1134,7 @@ function facebook_status_display_user_picture($account) {
 //============================
 
 /**
- * Implementation of hook_sms_incoming().
+ * Implements hook_sms_incoming().
  */
 function facebook_status_sms_incoming($op, $number, $message, $options = NULL) {
   global $user;
@@ -1047,7 +1142,7 @@ function facebook_status_sms_incoming($op, $number, $message, $options = NULL) {
     $maxlen = variable_get('facebook_status_length', 140);
     $message = drupal_substr($message, 3);
     if (drupal_strlen($message) > $maxlen && $maxlen > 0) {
-      $message = drupal_substr($message, 0, $maxlen - 3) .'...';
+      $message = drupal_substr($message, 0, $maxlen - 3) . '...';
     }
     facebook_status_save_status($user, 'user', $message);
   }
@@ -1058,7 +1153,7 @@ function facebook_status_sms_incoming($op, $number, $message, $options = NULL) {
 //====================================
 
 /**
- * Implementation of hook_views_bulk_operations_object_info().
+ * Implements hook_views_bulk_operations_object_info().
  */
 function facebook_status_views_bulk_operations_object_info() {
   return array(
@@ -1076,10 +1171,10 @@ function facebook_status_views_bulk_operations_object_info() {
 //=====================
 
 /**
- * Implementation of hook_ctools_plugin_directory().
+ * Implements hook_ctools_plugin_directory().
  */
 function facebook_status_ctools_plugin_directory($module, $plugin) {
   if ($module == 'ctools') {
-    return 'includes/ctools/'. $plugin;
+    return 'includes/ctools/' . $plugin;
   }
 }
diff --git a/includes/ctools/content_types/facebook_status_stream.inc b/includes/ctools/content_types/facebook_status_stream.inc
index 5fdd0e5..e4ad2ec 100644
--- a/includes/ctools/content_types/facebook_status_stream.inc
+++ b/includes/ctools/content_types/facebook_status_stream.inc
@@ -6,7 +6,7 @@
  */
 
 /**
- * Implementation of hook_ctools_content_types().
+ * Implements hook_ctools_content_types().
  */
 function facebook_status_facebook_status_stream_ctools_content_types() {
   return array(
@@ -20,21 +20,22 @@ function facebook_status_facebook_status_stream_ctools_content_types() {
 }
 
 /**
- * Implementation of hook_content_type_render().
+ * Implements hook_content_type_render().
  */
 function facebook_status_facebook_status_stream_content_type_render($subtype, $conf, $panel_args, $context) {
-  $account = isset($context->data) ? drupal_clone($context->data) : NULL;
+  $account = isset($context->data) ? clone $context->data : NULL;
   $block = new stdClass();
   $block->content = t('User information is currently unavailable.');
   if ($account) {
     $block->title = t("Stream");
+    // TODO Please change this theme call to use an associative array for the $variables parameter.
     $block->content = theme('facebook_status_form_display');
   }
   return $block;
 }
 
 /**
- * Implementation of hook_content_type_admin_title().
+ * Implements hook_content_type_admin_title().
  */
 function facebook_status_facebook_status_stream_content_type_admin_title($subtype, $conf, $context) {
   return t('Stream');
diff --git a/includes/facebook_status.preprocess.inc b/includes/facebook_status.preprocess.inc
index b4b0277..aea8d11 100644
--- a/includes/facebook_status.preprocess.inc
+++ b/includes/facebook_status.preprocess.inc
@@ -18,24 +18,27 @@ function template_preprocess_facebook_status_item(&$vars) {
     $vars['message'] = nl2br($vars['message']);
   }
   $vars += array(
-    'recipient' => '', 'recipient_name' => '', 'recipient_picture' => '',
-    'meta' => '', 'links' => '',
+    'recipient' => '',
+    'recipient_name' => '',
+    'recipient_picture' => '',
+    'meta' => '',
+    'links' => '',
   );
   $vars['recipient'] = $context['handler']->load_recipient($status->recipient);
   $vars['recipient_name'] = check_plain($context['handler']->recipient_name($vars['recipient']));
   $vars['recipient_link'] = $context['handler']->recipient_link($vars['recipient']);
   if ($status->type == 'user') {
-    $vars['recipient_picture'] = theme('user_picture', $vars['recipient']);
+    $vars['recipient_picture'] = theme('user_picture', array('account' => $vars['recipient']));
   }
   $vars['sender'] = _facebook_status_user_load($status->sender);
   $vars['sender_name'] = check_plain($vars['sender']->name);
-  $vars['sender_link'] = theme('username', $vars['sender']);
-  $vars['sender_picture'] = theme('user_picture', $vars['sender']);
+  $vars['sender_link'] = theme('username', array('account' => $vars['sender']));
+  $vars['sender_picture'] = theme('user_picture', array('account' => $vars['sender']));
   if ($options['cacheable']) {
-    $vars['created'] = format_date($status->created, 'small');
+    $vars['created'] = format_date($status->created, 'short');
   }
   else {
-    $vars['created'] = theme('facebook_status_time', $status->created);
+    $vars['created'] = theme('facebook_status_time', array('time' => $status->created));
     if ($status->type == 'user') {
       if ($status->sender != $status->recipient || strpos($status->message, '@') === 0 || strpos($status->message, '[@') === 0) {
         $vars['meta'] = t('To @recipient', array('@recipient' => $vars['recipient_name']));
@@ -45,7 +48,7 @@ function template_preprocess_facebook_status_item(&$vars) {
       $vars['meta'] = t('Posted on %entity', array('%entity' => $vars['recipient_name']));
     }
     if ($options['links']) {
-      $vars['links'] = !empty($status->links) ? theme('links', $node->links, array('class' => 'links inline')) : '';
+      $vars['links'] = !empty($status->links) ? theme('links', array('links' => $node->links, 'attributes' => array('class' => 'links inline'))) : '';
     }
   }
 }
@@ -87,10 +90,10 @@ function _facebook_status_show($status, $options) {
     }
     if (drupal_strlen($title) > 80) {
       //"\xE2\x80\xA6" is the unicode escape sequence for the HTML entity &hellip; (an ellipsis)
-      $title = drupal_substr($title, 0, 79) ."\xE2\x80\xA6";
+      $title = drupal_substr($title, 0, 79) . "\xE2\x80\xA6";
     }
     drupal_set_title($title);
   }
-  drupal_add_css(drupal_get_path('module', 'facebook_status') .'/resources/facebook_status.css');
-  return theme('facebook_status_item', $status, $options);
+  drupal_add_css(drupal_get_path('module', 'facebook_status') . '/resources/facebook_status.css');
+  return theme('facebook_status_item', array('status' => $status, 'options' => $options));
 }
diff --git a/includes/utility/facebook_status.admin.inc b/includes/utility/facebook_status.admin.inc
index 5361efe..b129c56 100644
--- a/includes/utility/facebook_status.admin.inc
+++ b/includes/utility/facebook_status.admin.inc
@@ -19,7 +19,8 @@ function facebook_status_admin($form_state) {
     '#required' => TRUE,
     '#weight' => -40,
   );
-  $formats = filter_formats();
+  global $user;
+  $formats = filter_formats($user);
   $options = array('none' => t('None (HTML escaped)'));
   foreach ($formats as $format) {
     $options[$format->format] = check_plain($format->name);
@@ -27,7 +28,7 @@ function facebook_status_admin($form_state) {
   $form['facebook_status_filter'] = array(
     '#type' => 'select',
     '#title' => t('Input filter'),
-    '#description' => '<strong>'. t('This input filter will run on all your statuses AND ACCESS TO IT IS NOT CHECKED, so make sure it is secure.') .'</strong>',
+    '#description' => '<strong>' . t('This input filter will run on all your statuses AND ACCESS TO IT IS NOT CHECKED, so make sure it is secure.') . '</strong>',
     '#default_value' => variable_get('facebook_status_filter', 'none'),
     '#options' => $options,
     '#weight' => -30,
@@ -35,7 +36,7 @@ function facebook_status_admin($form_state) {
   $form['facebook_status_repost'] = array(
     '#type' => 'textfield',
     '#title' => t('Re-post format'),
-    '#description' => t('The format of the default message when users click a link to re-post a status.') .' '.
+    '#description' => t('The format of the default message when users click a link to re-post a status.') . ' ' .
       t("@name will be replaced with the poster's name and @status will be replaced with the status text."),
     '#default_value' => variable_get('facebook_status_repost', 'Re: @name @status '),
     '#weight' => -20,
@@ -86,8 +87,8 @@ function facebook_status_admin_advanced($form_state) {
     '#type' => 'textfield',
     '#title' => t('Show "Read more" after'),
     '#field_suffix' => t('characters'),
-    '#description' => t('If a status message is longer than this number of characters and the viewing user has JavaScript enabled, the message will be truncated to this length and a "Read more" link will be appended.') .' '.
-      t('When clicked, the "Read more" link will reveal the rest of the status message.') .' '.
+    '#description' => t('If a status message is longer than this number of characters and the viewing user has JavaScript enabled, the message will be truncated to this length and a "Read more" link will be appended.') . ' ' .
+      t('When clicked, the "Read more" link will reveal the rest of the status message.') . ' ' .
       t('Must be a positive integer less than the maximum status message length, or zero to ignore this option.'),
     '#default_value' => variable_get('facebook_status_hide_length', 0),
     '#size' => 3,
@@ -98,8 +99,8 @@ function facebook_status_admin_advanced($form_state) {
   $form['facebook_status_nl2br'] = array(
     '#type' => 'checkbox',
     '#title' => t('Convert line breaks'),
-    '#description' => t('By default, line breaks in the status update form are ignored.') .' '.
-      t('If you use an input filter to fix that, the status text will appear on a different line than the username and other information.') .' '.
+    '#description' => t('By default, line breaks in the status update form are ignored.') . ' ' .
+      t('If you use an input filter to fix that, the status text will appear on a different line than the username and other information.') . ' ' .
       t('Enabling this setting allows line breaks to appear without the side-effect of the input filter.'),
     '#default_value' => variable_get('facebook_status_nl2br', 0),
     '#weight' => -60,
@@ -107,9 +108,9 @@ function facebook_status_admin_advanced($form_state) {
   $form['facebook_status_refresh'] = array(
     '#type' => 'checkbox',
     '#title' => t('Show AJAX "Refresh" link after status update views'),
-    '#description' => t('Display a "Refresh" link under content that will be automatically refreshed when the status update form is submitted.') .' '.
-      t('Clicking the link will similarly update the related content via JavaScript, without refreshing the page.') .' '.
-      t('Obviously, the "Refresh" link will only appear when there is something that can be refreshed.') .' '.
+    '#description' => t('Display a "Refresh" link under content that will be automatically refreshed when the status update form is submitted.') . ' ' .
+      t('Clicking the link will similarly update the related content via JavaScript, without refreshing the page.') . ' ' .
+      t('Obviously, the "Refresh" link will only appear when there is something that can be refreshed.') . ' ' .
       t('If you disable AHAH refreshing below or if you have no views attached to your status update forms, this setting is useless.'),
     '#default_value' => variable_get('facebook_status_refresh', 0),
     '#weight' => -50,
@@ -117,7 +118,7 @@ function facebook_status_admin_advanced($form_state) {
   $form['facebook_status_profile'] = array(
     '#type' => 'checkbox',
     '#title' => t('Show the status stream on the default user profiles'),
-    '#description' => t('If enabled, the status update form and view will appear on default user profiles.') .' '.
+    '#description' => t('If enabled, the status update form and view will appear on default user profiles.') . ' ' .
       t('This setting should only matter if you have not overridden the default user profile.'),
     '#default_value' => variable_get('facebook_status_profile', 1),
     '#weight' => -40,
@@ -125,7 +126,7 @@ function facebook_status_admin_advanced($form_state) {
   $form['facebook_status_default_text'] = array(
     '#type' => 'textfield',
     '#title' => t('Default text'),
-    '#description' => t('The text that appears by default in the status update box.') .' '.
+    '#description' => t('The text that appears by default in the status update box.') . ' ' .
       t('This will be automatically cleared when a user clicks in (or focuses on) the status update box.'),
     '#default_value' => variable_get('facebook_status_default_text', ''),
     '#weight' => -30,
@@ -183,7 +184,7 @@ function facebook_status_admin_contexts(&$form_state) {
   }
   foreach ($data as $type => $values) {
     $form['components'][$type]['title'] = array(
-      '#prefix' => '<div title="'. (isset($values['description']) ? $values['description'] : '') .'">',
+      '#prefix' => '<div title="' . (isset($values['description']) ? $values['description'] : '') . '">',
       '#value' => $values['title'],
       '#suffix' => '</div>',
     );
@@ -241,7 +242,8 @@ function facebook_status_admin_contexts_submit($form, &$form_state) {
 /**
  * Themes the stream context configuration form in a draggable table.
  */
-function theme_facebook_status_admin_contexts($form) {
+function theme_facebook_status_admin_contexts($variables) {
+  $form = $variables['form'];
   drupal_add_tabledrag('facebook-status-admin-contexts-table', 'order', 'sibling', 'weight-group');
   $header = array(t('Title'), t('View'), t('Refreshable DOM selectors'), t('Weight'), '', '');
   $rows = array();
@@ -260,17 +262,20 @@ function theme_facebook_status_admin_contexts($form) {
     $row[] = drupal_render($element['weight']);
     $row[] = drupal_render($element['type']);
     $row[] = drupal_render($element['already_saved']);
-    $rows[] = array('data' => $row, 'class' => 'draggable');
+    $rows[] = array(
+      'data' => $row,
+      'class' => 'draggable',
+    );
   }
-  $output = '<p>'.
-    t('In the "Refreshable DOM selectors" column, enter CSS selectors that specify sections of the page that should be automatically refreshed via AJAX when a status of that type is submitted.') .' '.
-    t('For example, to automatically update all &lt;div&gt; elements with class "myclass", enter "div.myclass" in the box (without the quotes).') .' '.
-    t('Do not include selectors that include the status update form.') .' '.
+  $output = '<p>' .
+    t('In the "Refreshable DOM selectors" column, enter CSS selectors that specify sections of the page that should be automatically refreshed via AJAX when a status of that type is submitted.') . ' ' .
+    t('For example, to automatically update all &lt;div&gt; elements with class "myclass", enter "div.myclass" in the box (without the quotes).') . ' ' .
+    t('Do not include selectors that include the status update form.') . ' ' .
     t('Enter each selector on a separate line.') .
-    '</p><p>'.
+    '</p><p>' .
     t('Also note that the view assigned to the "User profiles" context does not affect the view shown on conversation pages.') .
     '</p>';
-  $output .= theme('table', $header, $rows, array('id' => 'facebook-status-admin-contexts-table'));
-  $output .= drupal_render($form);
+  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'facebook-status-admin-contexts-table')));
+  $output .= drupal_render_children($form);
   return $output;
 }
diff --git a/includes/utility/facebook_status.ahah.inc b/includes/utility/facebook_status.ahah.inc
index a1d2a90..aee1013 100644
--- a/includes/utility/facebook_status.ahah.inc
+++ b/includes/utility/facebook_status.ahah.inc
@@ -11,11 +11,14 @@
 function facebook_status_save_js() {
   //Make sure we have form stuff available.
   module_load_include('inc', 'facebook_status', 'includes/utility/facebook_status.form');
-  $form_state = array('storage' => NULL, 'submitted' => FALSE);
+  $form_state = array(
+    'storage' => NULL,
+    'submitted' => FALSE,
+  );
   $form_build_id = $_POST['form_build_id'];
   $form = form_get_cache($form_build_id, $form_state);
   $form_state['post'] = $form['#post'] = $_POST;
-  $form['#programmed'] = $form['#redirect'] = FALSE;
+  $form['#programmed'] = $form_state['#redirect'] = FALSE;
   $args = $form['#parameters'];
   //This happens if someone goes directly to the JS processing page.
   if (!is_array($args) && !$args) {
@@ -39,6 +42,7 @@ function facebook_status_save_js() {
   //If the $form['fbss-submit']['#ahah']['wrapper'] div was found in a #prefix or #suffix of a form element that we re-rendered here,
   //then we would have to unset() it to prevent duplicate wrappers. However, we have a somewhat unique implementation in which the wrappers
   //are actually their own elements, so this is not an issue.
+  // TODO Please change this theme call to use an associative array for the $variables parameter.
   $output = theme('status_messages') . drupal_render($new_form);
 
   //Return the results.
@@ -47,9 +51,9 @@ function facebook_status_save_js() {
   //This version does work for these things.
   //From the AHAH Helper module, see http://drupal.org/node/331941
   //And from the Filefield module.
-  $javascript = drupal_add_js(NULL, NULL, 'header');
+  $javascript = drupal_add_js(NULL, array('type' => NULL));
   $GLOBALS['devel_shutdown'] = FALSE; //Still not really sure what the point of this is.
-  echo drupal_to_js(array(
+  echo drupal_json_encode(array(
     'status' => TRUE,
     'data' => $output,
     'settings' => call_user_func_array('array_merge_recursive', $javascript['setting']),
diff --git a/includes/utility/facebook_status.announce.inc b/includes/utility/facebook_status.announce.inc
index e15b374..0e8381d 100644
--- a/includes/utility/facebook_status.announce.inc
+++ b/includes/utility/facebook_status.announce.inc
@@ -26,14 +26,14 @@ function facebook_status_announce_admin(&$form_state) {
     '#required' => TRUE,
   );
   /*
-  // Unfortunately we have to use the default format because we don't have any
-  // way to keep track of which format to use at display time.
-  $formats = filter_formats();
-  $f = array();
-  foreach ($formats as $format) {
-    $f[$format->format] = filter_xss($format->name);
-  }
-  $form['format'] = filter_form();
+   // Unfortunately we have to use the default format because we don't have any
+   // way to keep track of which format to use at display time.
+   $formats = filter_formats();
+   $f = array();
+   foreach ($formats as $format) {
+   $f[$format->format] = filter_xss($format->name);
+   }
+   $form['format'] = filter_form();
    */
   $form['send'] = array(
     '#type' => 'submit',
@@ -55,14 +55,14 @@ function facebook_status_announce_admin_submit($form, &$form_state) {
     $v['format'] = NULL;
   }
 
-  $count = db_result(db_query("SELECT COUNT(*) FROM {users} WHERE status = 1"));
+  $count = db_query("SELECT COUNT(*) FROM {users} WHERE status = :status", array(':status' => 1))->fetchField();
   $batch = array(
     'operations' => array(
       array('facebook_status_announce_generate_status', array($v['message'], $from, $count, $v['format'])),
     ),
     'finished' => 'facebook_status_announce_batch_finished',
     'title' => t('Sending message to all users'),
-    'file' => drupal_get_path('module', 'facebook_status') .'/facebook_status.announce.inc',
+    'file' => drupal_get_path('module', 'facebook_status') . '/facebook_status.announce.inc',
   );
   batch_set($batch);
 }
@@ -83,10 +83,10 @@ function facebook_status_announce_generate_status($message, $from, $count, $form
   if (!isset($context['sandbox']['progress'])) {
     $context['sandbox']['progress'] = 0;
   }
-  $uid = db_result(db_query_range("SELECT uid FROM {users} WHERE status = 1", $context['sandbox']['progress'], 1));
+  $uid = db_query_range("SELECT uid FROM {users} WHERE status = :status", array(':status' => 1))->fetchField();
   // Caching here is actually slower than not caching because we should only load each user once.
   // So we use user_load() instead of _facebook_status_user_load().
-  $to = user_load(array('uid' => $uid));
+  $to = user_load($uid);
   facebook_status_save_status($to, 'user', $message, $from);
   $context['message'] = t('Sending message to %user (@current of @total)',
     array('%user' => $to->name, '@current' => $context['sandbox']['progress'], '@total' => $count));
@@ -105,7 +105,7 @@ function facebook_status_announce_batch_finished($success, $results, $operations
       drupal_set_message(format_plural(count($results),
         'Sent message to 1 user: !list',
         'Sent message to @count users: !list',
-        array('!list' => theme('item_list', $results))
+        array('!list' => theme('item_list', array('items' => $results)))
       ));
     }
     else {
@@ -116,9 +116,9 @@ function facebook_status_announce_batch_finished($success, $results, $operations
     $error_operation = reset($operations);
     drupal_set_message(t('An error occurred while processing %error_operation with arguments: @arguments',
       array(
-        '%error_operation' => $error_operation[0],
-        '@arguments' => print_r($error_operation[1], TRUE)
-      )
+      '%error_operation' => $error_operation[0],
+      '@arguments' => print_r($error_operation[1], TRUE),
+    )
     ));
   }
 }
diff --git a/includes/utility/facebook_status.contexts.inc b/includes/utility/facebook_status.contexts.inc
index 0f6b68b..71beae1 100644
--- a/includes/utility/facebook_status.contexts.inc
+++ b/includes/utility/facebook_status.contexts.inc
@@ -42,7 +42,7 @@ class facebook_status_context {
    * Returns an object representing the recipient given the recipient's ID.
    */
   function load_recipient($id) {
-    return call_user_func($this->type() .'_load', $id);
+    return call_user_func($this->type() . '_load', $id);
   }
 
   /**
@@ -74,7 +74,7 @@ class facebook_status_context {
    * Returns a URL to the recipient given an object representing the recipient.
    */
   function recipient_url($recipient) {
-    return $this->type() .'/'. $this->recipient_id($recipient);
+    return $this->type() . '/' . $this->recipient_id($recipient);
   }
 
   /**
@@ -152,7 +152,7 @@ class facebook_status_user_context extends facebook_status_context {
     return user_load(0);
   }
   function recipient_link($recipient) {
-    return theme('username', $recipient);
+    return theme('username', array('account' => $recipient));
   }
   function access_add($recipient, $sender) {
     return ($sender->uid == $recipient->uid && user_access('update and view own stream', $sender)) ||
@@ -182,8 +182,8 @@ class facebook_status_node_context extends facebook_status_context {
     return isset($recipient->nid) ? $recipient->nid : 0;
   }
   function load_random_recipient() {
-    $nid = db_result(db_query_range("SELECT nid FROM {node} ORDER BY RAND() ASC", 0, 1));
-    return node_load(array('nid' => $nid));
+    $nid = db_query_range("SELECT nid FROM {node} ORDER BY RAND() ASC")->fetchField();
+    return node_load($nid);
   }
   function access_add($recipient, $sender) {
     return parent::access_add($recipient, $sender) || $sender->uid == $recipient->uid;
@@ -219,7 +219,7 @@ class facebook_status_og_context extends facebook_status_node_context {
     return node_load($id);
   }
   function recipient_url($recipient) {
-    return 'node/'. $recipient->nid;
+    return 'node/' . $recipient->nid;
   }
   function access_add($recipient, $sender) {
     return parent::access_add($recipient, $sender) ||
diff --git a/includes/utility/facebook_status.conversation.inc b/includes/utility/facebook_status.conversation.inc
index 2fbcd82..d969325 100644
--- a/includes/utility/facebook_status.conversation.inc
+++ b/includes/utility/facebook_status.conversation.inc
@@ -54,7 +54,7 @@ function _facebook_status_conversation() {
   $key = $key ? 0 : 1; //The recipient is not the current user.
   $recipient = _facebook_status_user_load($args[$key]);
   if (facebook_status_user_access('converse') && !empty($recipient->uid)) {
-    return theme('facebook_status_form_display', $recipient, 'user');
+    return theme('facebook_status_form_display', array('recipient' => $recipient, 'type' => 'user'));
   }
   drupal_not_found();
 }
diff --git a/includes/utility/facebook_status.edit.inc b/includes/utility/facebook_status.edit.inc
index 46b4d6d..22da69d 100644
--- a/includes/utility/facebook_status.edit.inc
+++ b/includes/utility/facebook_status.edit.inc
@@ -11,9 +11,9 @@
 function facebook_status_edit(&$form_state, $status) {
   $context = facebook_status_determine_context($status->type);
   $maxlength = variable_get('facebook_status_length', 140);
-  $path = drupal_get_path('module', 'facebook_status') .'/resources';
-  drupal_add_js($path .'/facebook_status.js');
-  drupal_add_css($path .'/facebook_status.css');
+  $path = drupal_get_path('module', 'facebook_status') . '/resources';
+  drupal_add_js($path . '/facebook_status.js');
+  drupal_add_css($path . '/facebook_status.css');
   $intro = _facebook_status_get_edit_intro($status, $context);
   $self = '';
   if ($type == 'user' && $status->sender == $status->recipient) {
@@ -21,8 +21,8 @@ function facebook_status_edit(&$form_state, $status) {
   }
   $form = array('#cache' => TRUE);
   $form['intro'] = array(
-    '#value' => '<div class="clear-block facebook-status-update facebook-status-form-type-"'. $status->type . $self .'>'.
-      '<span class="facebook-status-intro">'. $intro .'</span>',
+    '#value' => '<div class="clear-block facebook-status-update facebook-status-form-type-"' . $status->type . $self . '>' .
+      '<span class="facebook-status-intro">' . $intro . '</span>',
     '#weight' => -45,
   );
   $form['fbss-status'] = array(
@@ -34,7 +34,7 @@ function facebook_status_edit(&$form_state, $status) {
     '#weight' => -40,
   );
   $form['chars'] = array(
-    '#value' => '<span id="facebook-status-chars">'. t('%chars characters allowed', array('%chars' => $maxlength)) .'</span>',
+    '#value' => '<span id="facebook-status-chars">' . t('%chars characters allowed', array('%chars' => $maxlength)) . '</span>',
     '#weight' => -38,
   );
   $form['sid'] = array(
@@ -71,12 +71,20 @@ function facebook_status_edit_submit($form, &$form_state) {
   $status_old = facebook_status_load($form_state['values']['sid']);
   $context = facebook_status_determine_context($status_old->type);
   $new_status = trim($form_state['values']['fbss-status']);
-  $time = time();
+  $time = REQUEST_TIME;
   global $user;
   //Pretend to have set a new status if the submitted status is exactly the same as the old one.
   if ($new_status != $status_old->message) {
     $sql = "UPDATE {facebook_status} SET message = '%s', created = %d WHERE sid = %d";
-    db_query($sql, $new_status, $time, $status_old->sid);
+    // TODO Please review the conversion of this statement to the D7 database API syntax.
+    /* db_query($sql, $new_status, $time, $status_old->sid) */
+    db_update('facebook_status')
+  ->fields(array(
+    'message' => $new_status,
+    'created' => $time,
+  ))
+  ->condition('sid', $status_old->sid)
+  ->execute();
     //Invokes hook_facebook_status_save($status, $edit).
     $status_old->message = $new_status;
     $status_old->created = $time;
@@ -86,7 +94,7 @@ function facebook_status_edit_submit($form, &$form_state) {
   drupal_set_message(t('Status has been successfully edited.'));
   //Trigger integration. Don't call if the status is blank because usually nothing interesting is happening.
   if (module_exists('trigger') && !empty($new_status)) {
-    $op = 'fbss_edited_'. $status_old->type;
+    $op = 'fbss_edited_' . $status_old->type;
     if ($status_old->type == 'user') {
       $op .= ($status_old->recipient == $status_old->sender ? '_self' : '_other');
     }
@@ -97,8 +105,8 @@ function facebook_status_edit_submit($form, &$form_state) {
 /**
  * The delete status confirmation form.
  */
-function _facebook_status_delete(&$form_state, $status) {
-  $form['infotext'] = array('#value' => '<p>'. t('Are you sure you want to permanently delete the status %status?', array('%status' => $status->message)) .'</p>');
+function _facebook_status_delete($form, &$form_state, $status) {
+  $form['infotext'] = array('#value' => '<p>' . t('Are you sure you want to permanently delete the status %status?', array('%status' => $status->message)) . '</p>');
   $form['confirm'] = array(
     '#type' => 'submit',
     '#value' => t('Confirm'),
@@ -159,47 +167,47 @@ function _facebook_status_get_edit_intro($status, $context) {
   $orig = nl2br(check_plain($status->message));
   if ($status->type == 'user') {
     if ($user->uid == $status->sender && $status->sender == $status->recipient) {
-      $intro = '<strong>'. t('Original status: !status', array('!status' => $orig)) .' </strong>';
+      $intro = '<strong>' . t('Original status: !status', array('!status' => $orig)) . ' </strong>';
     }
     elseif ($user->uid == $status->sender) {
-      $intro = '<strong>'. t('Original message from you to !recipient: !status', array(
-        '!recipient' => theme('username', _facebook_status_user_load($status->recipient)),
-        '!status' => $orig
-      )) .'</strong>';
+      $intro = '<strong>' . t('Original message from you to !recipient: !status', array(
+        '!recipient' => theme('username', array('account' => _facebook_status_user_load($status->recipient))),
+        '!status' => $orig,
+      )) . '</strong>';
     }
     elseif ($user->uid == $status->recipient) {
-      $intro = '<strong>'. t('Original message from !sender to you: !status', array(
-        '!sender' => theme('username', _facebook_status_user_load($status->sender)),
-        '!status' => $orig
-      )) .'</strong>';
+      $intro = '<strong>' . t('Original message from !sender to you: !status', array(
+        '!sender' => theme('username', array('account' => _facebook_status_user_load($status->sender))),
+        '!status' => $orig,
+      )) . '</strong>';
     }
     elseif ($status->sender == $status->recipient) {
-      $intro = '<strong>'. t('Original status by !creator: !status', array(
-        '!creator' => theme('username', _facebook_status_user_load($status->sender)),
-        '!status' => $orig
-      )) .'</strong>';
+      $intro = '<strong>' . t('Original status by !creator: !status', array(
+        '!creator' => theme('username', array('account' => _facebook_status_user_load($status->sender))),
+        '!status' => $orig,
+      )) . '</strong>';
     }
     else {
-      $intro = '<strong>'. t('Original message from !sender to !recipient: !status', array(
-        '!sender' => theme('username', _facebook_status_user_load($status->sender)),
-        '!recipient' => theme('username', _facebook_status_user_load($status->recipient)),
-        '!status' => $orig
-      )) .'</strong>';
+      $intro = '<strong>' . t('Original message from !sender to !recipient: !status', array(
+        '!sender' => theme('username', array('account' => _facebook_status_user_load($status->sender))),
+        '!recipient' => theme('username', array('account' => _facebook_status_user_load($status->recipient))),
+        '!status' => $orig,
+      )) . '</strong>';
     }
   }
   else {
     if ($status->sender == $user->uid) {
-      $intro = '<strong>'. t('Original message from you to !recipient: !status', array(
+      $intro = '<strong>' . t('Original message from you to !recipient: !status', array(
         '!recipient' => $context['handler']->recipient_link($context['handler']->load_recipient($status->recipient)),
-        '!status' => $orig
-      )) .'</strong>';
+        '!status' => $orig,
+      )) . '</strong>';
     }
     else {
-      $intro = '<strong>'. t('Original message from !sender to !recipient: !status', array(
-        '!sender' => theme('username', _facebook_status_user_load($status->sender)),
+      $intro = '<strong>' . t('Original message from !sender to !recipient: !status', array(
+        '!sender' => theme('username', array('account' => _facebook_status_user_load($status->sender))),
         '!recipient' => $context['handler']->recipient_link($context['handler']->load_recipient($status->recipient)),
-        '!status' => $orig
-      )) .'</strong>';
+        '!status' => $orig,
+      )) . '</strong>';
     }
   }
   return $intro;
diff --git a/includes/utility/facebook_status.form.inc b/includes/utility/facebook_status.form.inc
index 6cd3b1f..a68c668 100644
--- a/includes/utility/facebook_status.form.inc
+++ b/includes/utility/facebook_status.form.inc
@@ -27,7 +27,10 @@
  *   - There are no relevant status messages and the current user does not
  *     have access to use the form
  */
-function theme_facebook_status_form_display($context = NULL, $type = NULL, $view = NULL) {
+function theme_facebook_status_form_display($variables) {
+  $context = $variables['recipient'];
+  $type = $variables['type'];
+  $view = $variables['view'];
   global $user;
   // $context is NULL, so find everything.
   if (empty($context)) {
@@ -60,8 +63,8 @@ function theme_facebook_status_form_display($context = NULL, $type = NULL, $view
     if ($conversation) {
       $converse = ' facebook-status-conversation-form';
     }
-    $output .= '<div class="clear-block facebook-status-update facebook-status-update-main facebook-status-form-type-'. $type . $self . $converse .'">'.
-      drupal_get_form('facebook_status_box', $recipient, $type) .'</div>';
+    $output .= '<div class="clear-block facebook-status-update facebook-status-update-main facebook-status-form-type-' . $type . $self . $converse . '">' .
+      drupal_get_form('facebook_status_box', $recipient, $type) . '</div>';
   }
   if ($conversation) {
     $args = explode(',', $arg);
@@ -77,13 +80,13 @@ function theme_facebook_status_form_display($context = NULL, $type = NULL, $view
   }
   elseif (!empty($view)) {
     $output .= views_embed_view($view, 'default', $context['handler']->recipient_id($recipient), $type);
-    $selectors[] = '.view-id-'. $view;
+    $selectors[] = '.view-id-' . $view;
   }
   if (!empty($selectors)) {
     drupal_alter('facebook_status_refresh_selectors', $selectors, $recipient, $type);
     drupal_add_js(array('facebook_status' => array(
-      'refreshIDs' => array_unique($selectors)
-    )), 'setting');
+        'refreshIDs' => array_unique($selectors),
+      )), array('type' => 'setting', 'scope' => JS_DEFAULT));
   }
   return $output;
 }
@@ -98,7 +101,7 @@ function theme_facebook_status_form_display($context = NULL, $type = NULL, $view
  * @return
  *   A $form array.
  */
-function facebook_status_box($form_state, $recipient, $type = 'user') {
+function facebook_status_box($form, $form_state, $recipient, $type = 'user') {
   global $user;
   _facebook_status_use_autogrow();
   if (isset($form_state['facebook_status'])) {
@@ -130,12 +133,12 @@ function facebook_status_box($form_state, $recipient, $type = 'user') {
   //@todo: Replace with a "true" re-posting system.
   if (isset($_GET['sid']) && is_numeric($_GET['sid'])) {
     $rs = facebook_status_load($_GET['sid']);
-    $sender = user_load(array('uid' => $rs->sender));
+    $sender = user_load($rs->sender);
     if ($sender->uid != $user->uid && $rs->status) {
-      $name = '@'. $sender->name;
+      $name = '@' . $sender->name;
       //Properly reference tags with word-break characters in them.
       if (preg_match('/.+\b.+/', $sender->name)) {
-        $name = '['. $name .']';
+        $name = '[' . $name . ']';
       }
       $default = str_replace(array('@name', '@status'), array($name, $rs->status), variable_get('facebook_status_repost', 'Re: @name @status '));
       $intro = '';
@@ -144,23 +147,23 @@ function facebook_status_box($form_state, $recipient, $type = 'user') {
   elseif (isset($_GET['rsid']) && is_numeric($_GET['rsid'])) {
     $status = facebook_status_load($_GET['rsid']);
     if ($status->sid) {
-      $sender = user_load(array('uid' => $status->sender));
+      $sender = user_load($status->sender);
       if ($sender->uid != $user->uid) {
-        $name = '@'. $sender->name;
+        $name = '@' . $sender->name;
         //Properly reference tags with word-break characters in them.
         if (preg_match('/.+\b.+/', $sender->name)) {
-          $name = '['. $name .']';
+          $name = '[' . $name . ']';
         }
         $default = $name;
       }
-      $intro = t('In response to !status', array('!status' => theme('facebook_status_item', $status, array('links' => FALSE))));
+      $intro = t('In response to !status', array('!status' => theme('facebook_status_item', array('status' => $status, 'options' => array('links' => FALSE)))));
     }
   }
 
-  $path = drupal_get_path('module', 'facebook_status') .'/resources';
-  drupal_add_js($path .'/facebook_status.js');
-  drupal_add_js($path .'/facebook_status_ahah.js', 'module', 'footer');
-  drupal_add_css($path .'/facebook_status.css');
+  $path = drupal_get_path('module', 'facebook_status') . '/resources';
+  drupal_add_js($path . '/facebook_status.js');
+  drupal_add_js($path . '/facebook_status_ahah.js', array('scope' => 'footer'));
+  drupal_add_css($path . '/facebook_status.css');
   $form = array('#cache' => TRUE);
   //Form elements between ['opendiv'] and ['closediv'] will be refreshed via AHAH on form submission.
   $form['opendiv'] = array(
@@ -169,7 +172,7 @@ function facebook_status_box($form_state, $recipient, $type = 'user') {
   );
   if (!empty($intro)) {
     $form['intro'] = array(
-      '#value' => '<span class="facebook-status-intro">'. $intro .'</span>',
+      '#value' => '<span class="facebook-status-intro">' . $intro . '</span>',
       '#weight' => -45,
     );
   }
@@ -183,7 +186,7 @@ function facebook_status_box($form_state, $recipient, $type = 'user') {
   );
   if (variable_get('facebook_status_length', 140) > 0) {
     $form['chars'] = array(
-      '#value' => '<span class="facebook-status-chars">'. t('%chars characters allowed', array('%chars' => variable_get('facebook_status_length', 140))) .'</span>',
+      '#value' => '<span class="facebook-status-chars">' . t('%chars characters allowed', array('%chars' => variable_get('facebook_status_length', 140))) . '</span>',
       '#weight' => -35,
     );
   }
@@ -276,7 +279,7 @@ function facebook_status_box_submit($form, &$form_state) {
  */
 function _facebook_status_use_autogrow() {
   if (module_exists('libraries')) {
-    drupal_add_js(libraries_get_path('autogrow') .'/jquery.autogrow.js');
+    drupal_add_js(libraries_get_path('autogrow') . '/jquery.autogrow.js');
     return;
   }
   if (file_exists('sites/all/libraries/jquery.autogrow.js')) {
diff --git a/includes/utility/facebook_status.generate.inc b/includes/utility/facebook_status.generate.inc
index 4f3aed5..c55fb7f 100644
--- a/includes/utility/facebook_status.generate.inc
+++ b/includes/utility/facebook_status.generate.inc
@@ -93,7 +93,7 @@ function facebook_status_generate_form_submit($form, &$form_state) {
       'title' => t('Generating statuses'),
       'operations' => $operations,
       'finished' => 'facebook_status_generate_finished',
-      'file' => drupal_get_path('module', 'facebook_status') .'/facebook_status.generate.inc',
+      'file' => drupal_get_path('module', 'facebook_status') . '/facebook_status.generate.inc',
     ));
   }
   else {
@@ -137,7 +137,7 @@ function facebook_status_generate_status_bulk($count, $time, $types, $tags, &$co
  */
 function facebook_status_generate_status($time, $types, $tags, &$context) {
   module_load_include('inc', 'devel', 'devel_generate');
-  $stime = time() - mt_rand(0, $time);
+  $stime = REQUEST_TIME - mt_rand(0, $time);
   $uids = devel_get_users();
   $uid = 0;
   while ($uid == 0) {
@@ -169,9 +169,9 @@ function facebook_status_generate_status($time, $types, $tags, &$context) {
       $rid = $uids[array_rand($uids)];
     }
     $person = _facebook_status_user_load($rid);
-    $text .= '@'. $person->name .' ';
+    $text .= '@' . $person->name . ' ';
     if (preg_match('/.+\b.+/', $person->name)) {
-      $text .= '[@'. $person->name .'] ';
+      $text .= '[@' . $person->name . '] ';
     }
   }
 
@@ -181,12 +181,12 @@ function facebook_status_generate_status($time, $types, $tags, &$context) {
   if (module_exists('facebook_status_tags') && $tags && variable_get('facebook_status_tags_vid', -1) != -1 && mt_rand(0, 2) > 0) {
     $word = devel_generate_word(mt_rand(3, 7));
     if (drupal_strlen($text . $word) + 2 <= variable_get('facebook_status_length', 140)) {
-      $text .= ' #'. $word;
+      $text .= ' #' . $word;
     }
     $word = devel_generate_word(mt_rand(3, 5));
     $word2 = devel_generate_word(mt_rand(3, 5));
     if (drupal_strlen($text . $word . $word2) + 5 <= variable_get('facebook_status_length', 140)) {
-      $text .= ' [#'. $word .' '. $word2 .']';
+      $text .= ' [#' . $word . ' ' . $word2 . ']';
     }
   }
 
diff --git a/includes/views/facebook_status.views.inc b/includes/views/facebook_status.views.inc
index 17c9288..50041c3 100644
--- a/includes/views/facebook_status.views.inc
+++ b/includes/views/facebook_status.views.inc
@@ -311,7 +311,7 @@ function facebook_status_views_data() {
 function facebook_status_views_handlers() {
   return array(
     'info' => array(
-      'path' => drupal_get_path('module', 'facebook_status') .'/includes/views/handlers',
+      'path' => drupal_get_path('module', 'facebook_status') . '/includes/views/handlers',
     ),
     'handlers' => array(
       'facebook_status_views_handler_argument_flagged_user' => array(
@@ -383,13 +383,13 @@ function facebook_status_views_plugins() {
         'help' => t('Displays statuses as RSS items.'),
         'handler' => 'facebook_status_views_plugin_row_rss',
         'parent' => 'fields',
-        'path' => drupal_get_path('module', 'facebook_status') .'/includes/views/handlers',
+        'path' => drupal_get_path('module', 'facebook_status') . '/includes/views/handlers',
         'theme' => 'views_view_row_rss',
         'base' => array('facebook_status'),
         'uses fields' => FALSE,
         'uses options' => FALSE,
         'type' => 'feed',
       ),
-    )
+    ),
   );
 }
diff --git a/includes/views/handlers/facebook_status_views_handler_field_created.inc b/includes/views/handlers/facebook_status_views_handler_field_created.inc
index 22df8bd..76d5696 100644
--- a/includes/views/handlers/facebook_status_views_handler_field_created.inc
+++ b/includes/views/handlers/facebook_status_views_handler_field_created.inc
@@ -27,10 +27,11 @@ class facebook_status_views_handler_field_created extends views_handler_field_da
       $custom_format = $this->options['custom_date_format'];
     }
     if (!$value) {
+      // TODO Please change this theme call to use an associative array for the $variables parameter.
       return theme('views_nodate');
     }
     else {
-      $time_diff = time() - $value; // will be positive for a datetime in the past (ago), and negative for a datetime in the future (hence)
+      $time_diff = REQUEST_TIME - $value; // will be positive for a datetime in the past (ago), and negative for a datetime in the future (hence)
       switch ($format) {
         case 'raw time ago':
           return format_interval($time_diff, is_numeric($custom_format) ? $custom_format : 2);
@@ -47,7 +48,7 @@ class facebook_status_views_handler_field_created extends views_handler_field_da
         case 'custom':
           return format_date($value, $format, $custom_format);
         case 'themed':
-          return theme('facebook_status_time', $value);
+          return theme('facebook_status_time', array('time' => $value));
         default:
           return format_date($value, $format);
       }
diff --git a/includes/views/handlers/facebook_status_views_handler_field_cross.inc b/includes/views/handlers/facebook_status_views_handler_field_cross.inc
index 9296e55..2f49910 100644
--- a/includes/views/handlers/facebook_status_views_handler_field_cross.inc
+++ b/includes/views/handlers/facebook_status_views_handler_field_cross.inc
@@ -20,13 +20,13 @@ class facebook_status_views_handler_field_cross extends views_handler_field {
     $recipient_id = $values->{$this->aliases['recipient']};
     $sender_id = $values->{$this->field_alias};
     if ($sender_id == $recipient_id && $type == 'user') {
-      return theme('username', _facebook_status_user_load($sender_id));
+      return theme('username', array('account' => _facebook_status_user_load($sender_id)));
     }
     else {
       $context = facebook_status_determine_context($type);
       $recipient = $context['handler']->load_recipient($recipient_id);
       $args = array(
-        '!sender' => theme('username', _facebook_status_user_load($sender_id)),
+        '!sender' => theme('username', array('account' => _facebook_status_user_load($sender_id))),
         '!recipient' => $context['handler']->recipient_link($recipient),
       );
       return t('!sender &raquo; !recipient', $args);
diff --git a/includes/views/handlers/facebook_status_views_handler_field_cross_pic.inc b/includes/views/handlers/facebook_status_views_handler_field_cross_pic.inc
index 374f3d3..dfcaf0c 100644
--- a/includes/views/handlers/facebook_status_views_handler_field_cross_pic.inc
+++ b/includes/views/handlers/facebook_status_views_handler_field_cross_pic.inc
@@ -32,7 +32,7 @@ class facebook_status_views_handler_field_cross_pic extends views_handler_field
       $options = $this->options;
       $form['imagecache_preset'] = array(
         '#title' => t('Imagecache preset'),
-        '#type'  => 'select',
+        '#type' => 'select',
         '#options' => $opt,
         '#default_value' => $options['imagecache_preset'],
       );
@@ -53,7 +53,7 @@ class facebook_status_views_handler_field_cross_pic extends views_handler_field
       if (isset($options['imagecache_preset']) && $options['imagecache_preset']) {
         $sender->imagecache_preset = $options['imagecache_preset'];
       }
-      return t('!picture !user', array('!picture' => facebook_status_display_user_picture($sender), '!user' => theme('username', $sender)));
+      return t('!picture !user', array('!picture' => facebook_status_display_user_picture($sender), '!user' => theme('username', array('account' => $sender))));
     }
     elseif ($type == 'user') {
       $recipient = _facebook_status_user_load($recipient_id);
@@ -61,7 +61,10 @@ class facebook_status_views_handler_field_cross_pic extends views_handler_field
         $sender->imagecache_preset = $options['imagecache_preset'];
         $recipient->imagecache_preset = $options['imagecache_preset'];
       }
-      $args = array('!sender' => theme('username', $sender), '!recipient' => theme('username', $recipient));
+      $args = array(
+        '!sender' => theme('username', array('account' => $sender)),
+        '!recipient' => theme('username', array('account' => $recipient)),
+      );
       $args['!sender-picture'] = facebook_status_display_user_picture($sender);
       $args['!recipient-picture'] = facebook_status_display_user_picture($recipient);
       return t('!sender-picture !sender &raquo; !recipient-picture !recipient', $args);
@@ -74,7 +77,7 @@ class facebook_status_views_handler_field_cross_pic extends views_handler_field
         $recipient->imagecache_preset = $options['imagecache_preset'];
       }
       $args = array(
-        '!sender' => theme('username', $sender),
+        '!sender' => theme('username', array('account' => $sender)),
         '!recipient' => $context['handler']->recipient_link($recipient),
         '!sender-picture' => facebook_status_display_user_picture($sender),
       );
diff --git a/includes/views/handlers/facebook_status_views_handler_field_delete.inc b/includes/views/handlers/facebook_status_views_handler_field_delete.inc
index b672d84..8f19301 100644
--- a/includes/views/handlers/facebook_status_views_handler_field_delete.inc
+++ b/includes/views/handlers/facebook_status_views_handler_field_delete.inc
@@ -22,12 +22,12 @@ class facebook_status_views_handler_field_delete extends views_handler_field {
     $status->type = $values->{$this->aliases['type']};
     $status->sid = $values->{$this->field_alias};
     if (facebook_status_user_access('delete', $status)) {
-      drupal_add_css(drupal_get_path('module', 'facebook_status') .'/resources/facebook_status.css');
+      drupal_add_css(drupal_get_path('module', 'facebook_status') . '/resources/facebook_status.css');
       $q = $_GET['q'];
       if ($q == 'facebook_status/js') {
         $q = 'user';
       }
-      return '<span class="facebook-status-delete">'. l(t('Delete'), 'statuses/'. $status->sid .'/delete', array('query' => array('destination' => $q))) .'</span>';
+      return '<span class="facebook-status-delete">' . l(t('Delete'), 'statuses/' . $status->sid . '/delete', array('query' => array('destination' => $q))) . '</span>';
     }
   }
 }
diff --git a/includes/views/handlers/facebook_status_views_handler_field_edit.inc b/includes/views/handlers/facebook_status_views_handler_field_edit.inc
index f9fa7b5..b01e8d0 100644
--- a/includes/views/handlers/facebook_status_views_handler_field_edit.inc
+++ b/includes/views/handlers/facebook_status_views_handler_field_edit.inc
@@ -22,12 +22,12 @@ class facebook_status_views_handler_field_edit extends views_handler_field {
     $status->type = $values->{$this->aliases['type']};
     $status->sid = $values->{$this->field_alias};
     if (facebook_status_user_access('edit', $status)) {
-      drupal_add_css(drupal_get_path('module', 'facebook_status') .'/resources/facebook_status.css');
+      drupal_add_css(drupal_get_path('module', 'facebook_status') . '/resources/facebook_status.css');
       $q = $_GET['q'];
       if ($q == 'facebook_status/js') {
         $q = 'user';
       }
-      return '<span class="facebook-status-edit">'. l(t('Edit'), 'statuses/'. $status->sid .'/edit', array('query' => array('destination' => $q))) .'</span>';
+      return '<span class="facebook-status-edit">' . l(t('Edit'), 'statuses/' . $status->sid . '/edit', array('query' => array('destination' => $q))) . '</span>';
     }
   }
 }
diff --git a/includes/views/handlers/facebook_status_views_handler_field_message.inc b/includes/views/handlers/facebook_status_views_handler_field_message.inc
index 9570500..feb8257 100644
--- a/includes/views/handlers/facebook_status_views_handler_field_message.inc
+++ b/includes/views/handlers/facebook_status_views_handler_field_message.inc
@@ -14,6 +14,6 @@ class facebook_status_views_handler_field_message extends views_handler_field {
     if (variable_get('facebook_status_nl2br', 0)) {
       $message = nl2br($message);
     }
-    return '<span class="facebook-status-content">'. $message .'</span>';
+    return '<span class="facebook-status-content">' . $message . '</span>';
   }
 }
diff --git a/includes/views/handlers/facebook_status_views_handler_field_recipient_pic.inc b/includes/views/handlers/facebook_status_views_handler_field_recipient_pic.inc
index 01d2d70..6b1b6ea 100644
--- a/includes/views/handlers/facebook_status_views_handler_field_recipient_pic.inc
+++ b/includes/views/handlers/facebook_status_views_handler_field_recipient_pic.inc
@@ -30,7 +30,7 @@ class facebook_status_views_handler_field_recipient_pic extends views_handler_fi
       $options = $this->options;
       $form['imagecache_preset'] = array(
         '#title' => t('Imagecache preset'),
-        '#type'  => 'select',
+        '#type' => 'select',
         '#options' => $opt,
         '#default_value' => $options['imagecache_preset'],
       );
diff --git a/includes/views/handlers/facebook_status_views_handler_field_repost.inc b/includes/views/handlers/facebook_status_views_handler_field_repost.inc
index f8432eb..fe8e854 100644
--- a/includes/views/handlers/facebook_status_views_handler_field_repost.inc
+++ b/includes/views/handlers/facebook_status_views_handler_field_repost.inc
@@ -21,17 +21,20 @@ class facebook_status_views_handler_field_repost extends views_handler_field {
     parent::options_form($form, $form_state);
     $form['repost_text'] = array(
       '#title' => t('Re-post text'),
-      '#type'  => 'textfield',
+      '#type' => 'textfield',
       '#description' => t('The text that will display for the "Re-post this" link.'),
       '#default_value' => $this->options['repost_text'],
     );
   }
   function render($values) {
     if (facebook_status_user_access('add')) {
-      drupal_add_css(drupal_get_path('module', 'facebook_status') .'/resources/facebook_status.css');
+      drupal_add_css(drupal_get_path('module', 'facebook_status') . '/resources/facebook_status.css');
       $options = array(
         'attributes' => array('class' => 'facebook-status-repost'),
-        'query' => array('sid' => $values->{$this->field_alias}, 'destination' => $_GET['q'])
+        'query' => array(
+          'sid' => $values->{$this->field_alias},
+          'destination' => $_GET['q'],
+        ),
       );
       return l($this->options['repost_text'], 'statuses/share', $options);
     }
diff --git a/includes/views/handlers/facebook_status_views_handler_field_respond.inc b/includes/views/handlers/facebook_status_views_handler_field_respond.inc
index f30fd3b..a631bd3 100644
--- a/includes/views/handlers/facebook_status_views_handler_field_respond.inc
+++ b/includes/views/handlers/facebook_status_views_handler_field_respond.inc
@@ -20,27 +20,31 @@ class facebook_status_views_handler_field_respond extends views_handler_field {
     $recipient = _facebook_status_user_load($values->{$this->aliases['recipient']});
     $sender = _facebook_status_user_load($values->{$this->field_alias});
     $type = $values->{$this->aliases['type']};
-    drupal_add_css(drupal_get_path('module', 'facebook_status') .'/resources/facebook_status.css');
+    drupal_add_css(drupal_get_path('module', 'facebook_status') . '/resources/facebook_status.css');
     $options = array('attributes' => array('class' => 'facebook-status-respond'));
     if ($type == 'user' && $sender->uid != $recipient->uid && facebook_status_user_access('view_stream', $recipient) && facebook_status_user_access('view_stream', $sender)) {
       $title = t('View conversation');
       if ($recipient->uid == $user->uid) {
         $title = t('Reply');
       }
-      return l($title, 'statuses/conversation/'. $sender->uid .','. $recipient->uid, $options);
+      return l($title, 'statuses/conversation/' . $sender->uid . ',' . $recipient->uid, $options);
     }
     elseif ($type != 'user' || ($sender->uid == $recipient->uid && $sender->uid != $user->uid)) {
-      $s = '@'. $sender->name .' ';
+      $s = '@' . $sender->name . ' ';
       //Properly reference tags with word-break characters in them.
       if (preg_match('/.+\b.+/', $sender->name)) {
-        $s = '[@'. $sender->name .'] ';
+        $s = '[@' . $sender->name . '] ';
       }
       if (variable_get('facebook_status_reply_type', 'at') == 'at') {
         //Evidently url() sanitizes query strings itself, so we don't have to use check_plain() here.
-        $options['query'] = array('s' => $s, 'rsid' => $values->{$this->aliases['sid']}, 'destination' => $_GET['q']);
+        $options['query'] = array(
+          's' => $s,
+          'rsid' => $values->{$this->aliases['sid']},
+          'destination' => $_GET['q'],
+        );
         return l(t('Respond'), 'statuses/share', $options);
       }
-      return l(t('Respond'), 'statuses/conversation/'. $sender->uid .','. $user->uid, $options);
+      return l(t('Respond'), 'statuses/conversation/' . $sender->uid . ',' . $user->uid, $options);
     }
   }
 }
diff --git a/includes/views/handlers/facebook_status_views_handler_filter_own.inc b/includes/views/handlers/facebook_status_views_handler_filter_own.inc
index 12fc536..d7e6d74 100644
--- a/includes/views/handlers/facebook_status_views_handler_filter_own.inc
+++ b/includes/views/handlers/facebook_status_views_handler_filter_own.inc
@@ -22,4 +22,4 @@ class facebook_status_views_handler_filter_own extends views_handler_filter_bool
       $this->query->add_where(0, db_prefix_tables("($this->table_alias.type = 'user' AND $this->table_alias.sender = $this->table_alias.recipient)"));
     }
   }
-}
\ No newline at end of file
+}
diff --git a/includes/views/handlers/facebook_status_views_handler_filter_participant.inc b/includes/views/handlers/facebook_status_views_handler_filter_participant.inc
index 334b2d8..3fd694c 100644
--- a/includes/views/handlers/facebook_status_views_handler_filter_participant.inc
+++ b/includes/views/handlers/facebook_status_views_handler_filter_participant.inc
@@ -16,7 +16,7 @@ class facebook_status_views_handler_filter_participant extends views_handler_fil
       '#default_value' => isset($this->value) ? $this->value : '',
       '#required' => TRUE,
     );
-  } 
+  }
   function value_validate($form, &$form_state) {
     if (!is_numeric($form_state['values']['options']['value'])) {
       form_set_error('options][value', t('The specified user ID must be numeric.'));
diff --git a/includes/views/handlers/facebook_status_views_plugin_row_rss.inc b/includes/views/handlers/facebook_status_views_plugin_row_rss.inc
index 0a43b4b..0205baf 100644
--- a/includes/views/handlers/facebook_status_views_plugin_row_rss.inc
+++ b/includes/views/handlers/facebook_status_views_plugin_row_rss.inc
@@ -46,7 +46,10 @@ class facebook_status_views_plugin_row_rss extends views_plugin_row {
     $item->description = $message;
 
     $item->elements = array(
-      array('key' => 'pubDate', 'value' => gmdate('r', $status->created)),
+      array(
+        'key' => 'pubDate',
+        'value' => gmdate('r', $status->created),
+      ),
       array(
         'key' => 'dc:creator',
         'value' => check_plain($sender->name),
@@ -55,7 +58,7 @@ class facebook_status_views_plugin_row_rss extends views_plugin_row {
       array(
         'key' => 'guid',
         'value' => $status->sid . ' at ' . $base_url,
-        'attributes' => array('isPermaLink' => 'false')
+        'attributes' => array('isPermaLink' => 'false'),
       ),
     );
 
@@ -65,6 +68,7 @@ class facebook_status_views_plugin_row_rss extends views_plugin_row {
       }
     }
 
+    // TODO Please change this theme call to use an associative array for the $variables parameter.
     return theme($this->theme_functions(), $this->view, $this->options, $item);
   }
 }
diff --git a/submodules/facebook_status_tags/facebook_status_tags.info b/submodules/facebook_status_tags/facebook_status_tags.info
index f0dc9b3..ad47a87 100644
--- a/submodules/facebook_status_tags/facebook_status_tags.info
+++ b/submodules/facebook_status_tags/facebook_status_tags.info
@@ -2,4 +2,18 @@ name = Facebook-style Statuses Tags
 description = "Converts @usernames to themed usernames and #hashtags to themed taxonomy terms on Facebook-style Statuses."
 dependencies[] = facebook_status
 package = Facebook-style Statuses
-core = 6.x
+core = 7.x
+
+files[] = facebook_status_tags.install
+files[] = facebook_status_tags.module
+files[] = facebook_status_tags.rules.inc
+files[] = views/facebook_status_tags.views.inc
+files[] = views/facebook_status_tags.views_default.inc
+files[] = views/facebook_status_tags_views_handler_argument_has_this_tag.inc
+files[] = views/facebook_status_tags_views_handler_argument_has_this_tag_id.inc
+files[] = views/facebook_status_tags_views_handler_field_all_terms.inc
+files[] = views/facebook_status_tags_views_handler_field_message.inc
+files[] = views/facebook_status_tags_views_handler_field_name.inc
+files[] = views/facebook_status_tags_views_handler_filter_has_tag.inc
+files[] = views/facebook_status_tags_views_handler_filter_has_this_tag.inc
+files[] = views/facebook_status_tags_views_handler_filter_string_type.inc
diff --git a/submodules/facebook_status_tags/facebook_status_tags.install b/submodules/facebook_status_tags/facebook_status_tags.install
index 450fb50..8cbd3d7 100644
--- a/submodules/facebook_status_tags/facebook_status_tags.install
+++ b/submodules/facebook_status_tags/facebook_status_tags.install
@@ -7,7 +7,7 @@
  */
 
 /**
- * Implementation of hook_schema().
+ * Implements hook_schema().
  */
 function facebook_status_tags_schema() {
   $schema = array();
@@ -52,10 +52,11 @@ function facebook_status_tags_schema() {
 }
 
 /**
- * Implementation of hook_install().
+ * Implements hook_install().
  */
 function facebook_status_tags_install() {
-  drupal_install_schema('facebook_status_tags');
+  // TODO The drupal_(un)install_schema functions are called automatically in D7.
+  // drupal_install_schema('facebook_status_tags')
 
   if (module_exists('taxonomy')) {
     // Create a default vocabulary for use with hashtags.
@@ -70,8 +71,8 @@ function facebook_status_tags_install() {
       'module' => 'facebook_status_tags',
       'help' => '',
     );
-    taxonomy_save_vocabulary($vocab);
-    $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE name = '%s'", st('Hashtags')));
+    taxonomy_vocabulary_save($vocabulary /* TODO Vocabulary object replaces array $vocab */);
+    $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE name = :name", array(':name' => st('Hashtags')))->fetchField();
     variable_set('facebook_status_tags_vid', $vid);
   }
   else {
@@ -82,10 +83,11 @@ function facebook_status_tags_install() {
 }
 
 /**
- * Implementation of hook_uninstall().
+ * Implements hook_uninstall().
  */
 function facebook_status_tags_uninstall() {
-  drupal_uninstall_schema('facebook_status_tags');
+  // TODO The drupal_(un)install_schema functions are called automatically in D7.
+  // drupal_uninstall_schema('facebook_status_tags')
   variable_del('facebook_status_tags_url');
   variable_del('facebook_status_tags_vid');
   variable_del('facebook_status_tags_time');
diff --git a/submodules/facebook_status_tags/facebook_status_tags.module b/submodules/facebook_status_tags/facebook_status_tags.module
index 0ce9242..f6cb1f1 100644
--- a/submodules/facebook_status_tags/facebook_status_tags.module
+++ b/submodules/facebook_status_tags/facebook_status_tags.module
@@ -17,29 +17,42 @@
 //===============
 
 /**
- * Implementation of hook_help().
+ * Implements hook_help().
  */
 function facebook_status_tags_help($path, $arg) {
   if ($path == 'admin/help#facebook_status_tags') {
-    return t('Modifies Facebook-style Statuses on display to replace @mentions with the themed username and #hashtags with taxonomy terms.') .' '.
+    return t('Modifies Facebook-style Statuses on display to replace @mentions with the themed username and #hashtags with taxonomy terms.') . ' ' .
       t('Please see the <a href="http://drupal.org/project/facebook_status" rel="nofollow">Facebook-style Statuses project page</a> for more information.');
   }
 }
 
 /**
- * Implementation of hook_block().
+ * Implements hook_block_info().
  */
-function facebook_status_tags_block($op = 'list', $delta = 0, $edit = NULL) {
-  if ($op == 'list') {
+function facebook_status_tags_block_info() {
+  if (TRUE) {
     $block['facebook_status_popular_tags']['info'] = t('Facebook-style Statuses Popular Tags');
     return $block;
   }
-  elseif ($op == 'view' && $delta == 'facebook_status_popular_tags') {
+}
+
+/**
+ * Implements hook_block_view().
+ */
+function facebook_status_tags_block_view($delta) {
+  if (TRUE && $delta == 'facebook_status_popular_tags') {
     $block['subject'] = t('Popular tags');
+    // TODO Please change this theme call to use an associative array for the $variables parameter.
     $block['content'] = theme('facebook_status_popular_tags');
     return $block;
   }
-  elseif ($op == 'configure' && $delta == 'facebook_status_popular_tags') {
+}
+
+/**
+ * Implements hook_block_configure().
+ */
+function facebook_status_tags_block_configure($delta) {
+  if (TRUE && $delta == 'facebook_status_popular_tags') {
     $form['facebook_status'] = array(
       '#type' => 'fieldset',
       '#title' => t('Facebook-style Statuses Settings'),
@@ -65,13 +78,24 @@ function facebook_status_tags_block($op = 'list', $delta = 0, $edit = NULL) {
     );
     return $form;
   }
-  elseif ($op == 'save' && $delta == 'facebook_status_popular_tags') {
+}
+
+/**
+ * Implements hook_block_save().
+ */
+function facebook_status_tags_block_save($delta, $edit) {
+  if (TRUE && $delta == 'facebook_status_popular_tags') {
     variable_set('facebook_status_tags_count', $edit['facebook_status']['facebook_status_tags_count']);
     variable_set('facebook_status_tags_time', $edit['facebook_status']['facebook_status_tags_time']);
   }
 }
 
 /**
+ * Implements hook_block().
+ */
+function facebook_status_tags_block_OLD($op = 'list', $delta = 0, $edit = NULL) { }
+
+/**
  * The validate function for the settings on the block form.
  */
 function facebook_status_tags_block_validate($form, &$form_state) {
@@ -82,13 +106,13 @@ function facebook_status_tags_block_validate($form, &$form_state) {
 }
 
 /**
- * Implementation of hook_form_FORM_ID_alter().
+ * Implements hook_form_FORM_ID_alter().
  */
 function facebook_status_tags_form_facebook_status_admin_alter(&$form, &$form_state) {
   if (module_exists('taxonomy')) {
     if (variable_get('facebook_status_tags_vid', -1) == -1) {
       drupal_set_message(
-        t('You have the Taxonomy and Facebook-style Statuses Tags modules enabled, but you have not set them up to work together!') .' '.
+        t('You have the Taxonomy and Facebook-style Statuses Tags modules enabled, but you have not set them up to work together!') . ' ' .
         t('You must set a vocabulary for #hashtags below in order for the #hashtags feature to work.'),
         'error');
     }
@@ -102,7 +126,7 @@ function facebook_status_tags_form_facebook_status_admin_alter(&$form, &$form_st
     if (count($options) < 2) {
       drupal_set_message(
         t('You must <a href="!vocab">create a free-tagging vocabulary</a> for use with #hashtags in order to take advantage of that feature.',
-          array('!vocab' => url('admin/content/taxonomy/add/vocabulary'))),
+          array('!vocab' => url('admin/structure/taxonomy/add/vocabulary'))),
         'error');
     }
     $form['facebook_status_tags_vid'] = array(
@@ -116,21 +140,21 @@ function facebook_status_tags_form_facebook_status_admin_alter(&$form, &$form_st
   }
   elseif (!module_exists('taxonomy')) {
     drupal_set_message(
-      t('You have the Facebook-style Statuses Tags module enabled.') .' '.
+      t('You have the Facebook-style Statuses Tags module enabled.') . ' ' .
       t('However, you will not be able to use #hashtags unless you <a href="!enable">enable</a> the core Taxonomy module.',
-        array('!enable' => url('admin/build/modules'))) .' '.
+        array('!enable' => url('admin/modules'))) . ' ' .
       t('Return here after enabling the Taxonomy module to configure it to accept #hashtags.')
     );
   }
 }
 
 /**
- * Implementation of hook_theme().
+ * Implements hook_theme().
  */
 function facebook_status_tags_theme($existing, $type, $theme, $path) {
   return array(
     'facebook_status_popular_tags' => array(
-      'arguments' => array(
+      'variables' => array(
         'count' => NULL,
         'time' => NULL,
       ),
@@ -149,7 +173,9 @@ function facebook_status_tags_theme($existing, $type, $theme, $path) {
  * @return
  *   An HTML representation of a list of tags.
  */
-function theme_facebook_status_popular_tags($count = NULL, $time = NULL) {
+function theme_facebook_status_popular_tags($variables) {
+  $count = $variables['count'];
+  $time = $variables['time'];
   if (!$count) {
     $count = variable_get('facebook_status_tags_count', 5);
   }
@@ -163,7 +189,7 @@ function theme_facebook_status_popular_tags($count = NULL, $time = NULL) {
     $items[] = t('!term (@count)', array('!term' => $term_link, '@count' => $term->popularity));
   }
   if (!empty($items)) {
-    return theme('item_list', $items);
+    return theme('item_list', array('items' => $items));
   }
 }
 
@@ -199,9 +225,9 @@ function facebook_status_tags_get_statuses($tag, $type = 'term', $count = 1, $se
   elseif (is_string($tag)) {
     $rid = "name = '%s'";
   }
-  $sql = "SELECT fbst.sid FROM {facebook_status_tags} fbst INNER JOIN {facebook_status} fb ON fbst.sid = fb.sid WHERE fbst.". $rid ." AND fbst.type = '%s' AND ";
+  $sql = "SELECT fbst.sid FROM {facebook_status_tags} fbst INNER JOIN {facebook_status} fb ON fbst.sid = fb.sid WHERE fbst." . $rid . " AND fbst.type = '%s' AND ";
   if ($sender == 0) {
-    $sql = "SELECT sid FROM {facebook_status_tags} WHERE ". $rid ." AND type = '%s'";
+    $sql = "SELECT sid FROM {facebook_status_tags} WHERE " . $rid . " AND type = '%s'";
   }
   elseif (is_numeric($sender)) {
     $params[] = $sender;
@@ -209,7 +235,7 @@ function facebook_status_tags_get_statuses($tag, $type = 'term', $count = 1, $se
   }
   elseif (is_array($sender)) {
     $params = array_merge($params, $sender);
-    $sql .= 'fb.sender IN ('. db_placeholders($sender) .')';
+    $sql .= 'fb.sender IN (' . db_placeholders($sender) . ')';
   }
   else {
     // Something unexpected happened; abort.
@@ -217,9 +243,11 @@ function facebook_status_tags_get_statuses($tag, $type = 'term', $count = 1, $se
   }
 
   if ($count) {
-    $result = db_query_range($sql, $params, 0, $count);
+    // TODO Please convert this statement to the D7 database API syntax.
+    $result = db_query_range($sql, $params);
   }
   else {
+    // TODO Please convert this statement to the D7 database API syntax.
     $result = db_query($sql, $params);
   }
   $statuses = array();
@@ -248,11 +276,12 @@ function facebook_status_tags_has_tags($sid, $type = NULL) {
       $args[] = $type;
     }
     elseif (is_array($type)) {
-      $sql .= " AND TYPE IN (". db_placeholders($type, 'text') .")";
+      $sql .= " AND TYPE IN (" . db_placeholders($type, 'text') . ")";
       $args = array_merge($args, $type);
     }
   }
-  return db_result(db_query($sql, $args));
+  // TODO Please convert this statement to the D7 database API syntax.
+  return db_query($sql, $args)->fetchField();
 }
 
 /**
@@ -268,7 +297,7 @@ function facebook_status_tags_has_tags($sid, $type = NULL) {
  *   1 if the status has the reference or 0 if it does not.
  */
 function facebook_status_tags_status_has_tag($sid, $rid, $type = 'term') {
-  return db_result(db_query("SELECT COUNT(*) FROM {facebook_status_tags} WHERE sid = %d AND rid = %d AND type = '%s'", $sid, $rid, $type));
+  return db_query("SELECT COUNT(*) FROM {facebook_status_tags} WHERE sid = :sid AND rid = :rid AND type = :type", array(':sid' => $sid, ':rid' => $rid, ':type' => $type))->fetchField();
 }
 
 /**
@@ -284,7 +313,7 @@ function facebook_status_tags_status_has_tag($sid, $rid, $type = 'term') {
  *   1 if the status has the reference or 0 if it does not.
  */
 function facebook_status_tags_status_has_tag_by_name($sid, $tag, $type = 'term') {
-  return db_result(db_query("SELECT COUNT(*) FROM {facebook_status_tags} WHERE sid = %d AND name = '%s' AND type = '%s'", $sid, $tag, $type));
+  return db_query("SELECT COUNT(*) FROM {facebook_status_tags} WHERE sid = :sid AND name = :name AND type = :type", array(':sid' => $sid, ':name' => $tag, ':type' => $type))->fetchField();
 }
 
 /**
@@ -298,11 +327,11 @@ function facebook_status_tags_status_has_tag_by_name($sid, $tag, $type = 'term')
  *   An array of term objects or user objects.
  */
 function facebook_status_tags_get_status_tags($sid, $type = 'term') {
-  $result = db_query("SELECT rid FROM {facebook_status_tags} WHERE sid = %d AND type = '%s'", $sid, $type);
+  $result = db_query("SELECT rid FROM {facebook_status_tags} WHERE sid = :sid AND type = :type", array(':sid' => $sid, ':type' => $type));
   $rids = array();
   while ($rid = db_fetch_object($result)) {
     if ($type == 'term') {
-      $rids[] = taxonomy_get_term($rid->rid);
+      $rids[] = taxonomy_term_load($rid->rid);
     }
     elseif ($type == 'user') {
       $rids[] = _facebook_status_user_load($rid->rid);
@@ -358,7 +387,7 @@ function facebook_status_tags_popular_users($count = 5, $time = 'all', $options
  *   popular first) and with the property "popularity" added to each object.
  */
 function facebook_status_tags_popular($type = 'term', $count = 5, $time = 'all', $options = array()) {
-  $now = time();
+  $now = REQUEST_TIME;
   if (is_numeric($time)) {
     if ($time < 0) {
       $time = $now + $time;
@@ -366,11 +395,11 @@ function facebook_status_tags_popular($type = 'term', $count = 5, $time = 'all',
   }
   else {
     $times = array(
-      'day'   => $now -    86400,
-      'week'  => $now -   604800,
+      'day' => $now -    86400,
+      'week' => $now -   604800,
       'month' => $now -  2592000,
-      'year'  => $now - 31449600,
-      'all'   => 0,
+      'year' => $now - 31449600,
+      'all' => 0,
     );
     $time = $times[$time];
   }
@@ -402,13 +431,14 @@ function facebook_status_tags_popular($type = 'term', $count = 5, $time = 'all',
   }
   $args[] = $type;
   $args[] = $time;
+  // TODO Please convert this statement to the D7 database API syntax.
   $result = db_query_range("SELECT COUNT(t.sid) count, t.rid FROM {facebook_status_tags} t INNER JOIN {facebook_status} f ON t.sid = f.sid
-    WHERE ". $restrict ."t.type = '%s' AND f.created > %d GROUP BY t.rid ORDER BY count DESC, t.sid DESC", $args, 0, $count);
+    WHERE " . $restrict . "t.type = '%s' AND f.created > %d GROUP BY t.rid ORDER BY count DESC, t.sid DESC", $args);
   $tags = array();
   while ($tag = db_fetch_object($result)) {
     $c = $tag->count;
     if ($type == 'term') {
-      $tag = taxonomy_get_term($tag->rid);
+      $tag = taxonomy_term_load($tag->rid);
     }
     elseif ($type == 'user') {
       $tag = _facebook_status_user_load($tag->rid);
@@ -468,7 +498,10 @@ function _facebook_status_tags_filter($subject, $new = FALSE) {
   uasort($words, '_facebook_status_tags_sort');
   $search = array();
   $replace = array();
-  $items = array('@' => array(), '#' => array());
+  $items = array(
+    '@' => array(),
+    '#' => array(),
+  );
   foreach ($words as $word) {
     $sb = FALSE;
     if (strpos($word, '[') === 0) {
@@ -482,7 +515,7 @@ function _facebook_status_tags_filter($subject, $new = FALSE) {
       if ($op == '@') {
         $account = _facebook_status_user_load_by_name($match);
         if ($account->uid) {
-          $link = $op . theme('username', $account);
+          $link = $op . theme('username', array('account' => $account));
           $items['@'][] = $account;
         }
       }
@@ -494,7 +527,7 @@ function _facebook_status_tags_filter($subject, $new = FALSE) {
             'vid' => variable_get('facebook_status_tags_vid', -1),
             'name' => $match,
           );
-          taxonomy_save_term($term);
+          taxonomy_term_save($term /* TODO Term object replaces array $term */);
         }
         $dest = _facebook_status_tags_resolve($term);
         $link = $op . l($term->name, $dest);
@@ -502,7 +535,7 @@ function _facebook_status_tags_filter($subject, $new = FALSE) {
       }
       if ($link) {
         if ($sb) {
-          $word = '['. $word .']';
+          $word = '[' . $word . ']';
         }
         $search[] = $word;
         $replace[] = $link;
@@ -563,7 +596,7 @@ function _facebook_status_tags_resolve($term) {
  * Gets a taxonomy term by name.
  */
 function _facebook_status_tags_get_term($name) {
-  return db_fetch_object(db_query("SELECT tid, name FROM {term_data} WHERE LOWER(name) = LOWER('%s') AND vid = %d", $name, variable_get('facebook_status_tags_vid', -1)));
+  return db_fetch_object(db_query("SELECT tid, name FROM {taxonomy_term_data} WHERE LOWER(name) = :LOWER(name) AND vid = :vid", array(':LOWER(name)' => LOWER('%s'), ':vid' => $name, '' => variable_get('facebook_status_tags_vid', - 1))));
 }
 
 //===================
@@ -571,7 +604,7 @@ function _facebook_status_tags_get_term($name) {
 //===================
 
 /**
- * Implementation of hook_preprocess_facebook_status_item().
+ * Implements hook_preprocess_facebook_status_item().
  */
 function facebook_status_tags_preprocess_facebook_status_item(&$vars) {
   $message = $vars['message'];
@@ -582,12 +615,16 @@ function facebook_status_tags_preprocess_facebook_status_item(&$vars) {
 }
 
 /**
- * Implementation of hook_facebook_status_save().
+ * Implements hook_facebook_status_save().
  */
 function facebook_status_tags_facebook_status_save($status, $edit = FALSE) {
   // If the status was just edited, the tags could have changed, so we flush them.
   if ($edit) {
-    db_query("DELETE FROM {facebook_status_tags} WHERE sid = %d", $status->sid);
+    // TODO Please review the conversion of this statement to the D7 database API syntax.
+    /* db_query("DELETE FROM {facebook_status_tags} WHERE sid = %d", $status->sid) */
+    db_delete('facebook_status_tags')
+  ->condition('sid', $status->sid)
+  ->execute();
   }
   $matches = _facebook_status_tags_filter($status->message, TRUE);
   // Users.
@@ -604,7 +641,7 @@ function facebook_status_tags_facebook_status_save($status, $edit = FALSE) {
       $old_matches[] = $account->uid;
     }
   }
-  
+
   // Terms.
   if (!module_exists('taxonomy') || variable_get('facebook_status_tags_vid', -1) == -1) {
     return;
@@ -626,10 +663,14 @@ function facebook_status_tags_facebook_status_save($status, $edit = FALSE) {
 }
 
 /**
- * Implementation of hook_facebook_status_delete().
+ * Implements hook_facebook_status_delete().
  */
 function facebook_status_tags_facebook_status_delete($sid) {
-  db_query("DELETE FROM {facebook_status_tags} WHERE sid = %d", $sid);
+  // TODO Please review the conversion of this statement to the D7 database API syntax.
+  /* db_query("DELETE FROM {facebook_status_tags} WHERE sid = %d", $sid) */
+  db_delete('facebook_status_tags')
+  ->condition('sid', $sid)
+  ->execute();
 }
 
 //=====================
@@ -637,17 +678,17 @@ function facebook_status_tags_facebook_status_delete($sid) {
 //=====================
 
 /**
- * Implementation of hook_views_api().
+ * Implements hook_views_api().
  */
 function facebook_status_tags_views_api() {
   return array(
     'api' => 2,
-    'path' => drupal_get_path('module', 'facebook_status_tags') .'/views',
+    'path' => drupal_get_path('module', 'facebook_status_tags') . '/views',
   );
 }
 
 /**
- * Implementation of hook_views_data_alter().
+ * Implements hook_views_data_alter().
  *
  * Overrides message handler to convert tags to links.
  */
@@ -656,29 +697,47 @@ function facebook_status_tags_views_data_alter(&$data) {
 }
 
 /**
- * Implementation of hook_taxonomy().
+ * Implements hook_taxonomy().
  */
 function facebook_status_tags_taxonomy($op, $type, $array = NULL) {
   if ($op != 'delete') {
     return;
   }
   if ($type == 'term') {
-    db_query("DELETE FROM {facebook_status_tags} WHERE rid = %d AND type = 'term'", $array['tid']);
-  }
-  elseif ($type == 'vocabulary') {
+    // TODO Please review the conversion of this statement to the D7 database API syntax.
+    /* db_query("DELETE FROM {facebook_status_tags} WHERE rid = %d AND type = 'term'", $array['tid']) */
+    db_delete('facebook_status_tags')
+  ->condition('rid', $array['tid'])
+  ->condition('type', 'term')
+  ->execute();
+  }
+  elseif ($type == 'taxonomy_vocabulary') {
     if ($array['vid'] === variable_get('facebook_status_tags_vid', -1)) {
       // If the vocabulary is deleted, all the tags will no longer exist, so the references are invalid.
-      db_query("DELETE FROM {facebook_status_tags} WHERE type = 'term'");
+      // TODO Please review the conversion of this statement to the D7 database API syntax.
+      /* db_query("DELETE FROM {facebook_status_tags} WHERE type = 'term'") */
+      db_delete('facebook_status_tags')
+  ->condition('type', 'term')
+  ->execute();
       variable_set('facebook_status_tags_vid', -1);
     }
   }
 }
 
 /**
- * Implementation of hook_user().
+ * Implements hook_user_cancel().
  */
-function facebook_status_tags_user($op, &$edit, &$account, $category = NULL) {
-  if ($op == 'delete') {
-    db_query("DELETE FROM {facebook_status_tags} WHERE rid = %d and type = 'user'", $account->uid);
+function facebook_status_tags_user_cancel($edit, $account, $method) {
+  if (TRUE) {
+    // TODO Please review the conversion of this statement to the D7 database API syntax.
+    /* db_query("DELETE FROM {facebook_status_tags} WHERE rid = %d and type = 'user'", $account->uid) */
+    db_delete('facebook_status_tags')
+  ->condition('rid', $account->uid)
+  ->execute();
   }
 }
+
+/**
+ * Implements hook_user().
+ */
+function facebook_status_tags_user_OLD($op, &$edit, &$account, $category = NULL) { }
diff --git a/submodules/facebook_status_tags/facebook_status_tags.rules.inc b/submodules/facebook_status_tags/facebook_status_tags.rules.inc
index 912bf55..94dbf91 100644
--- a/submodules/facebook_status_tags/facebook_status_tags.rules.inc
+++ b/submodules/facebook_status_tags/facebook_status_tags.rules.inc
@@ -6,14 +6,17 @@
  */
 
 /**
- * Implementation of hook_rules_condition_info().
+ * Implements hook_rules_condition_info().
  */
 function facebook_status_tags_rules_condition_info() {
   return array(
     'facebook_status_tags_has_tags_condition' => array(
       'label' => t('Status has tags'),
       'arguments' => array(
-        'status' => array('type' => 'facebook_status', 'label' => t('The status')),
+        'status' => array(
+          'type' => 'facebook_status',
+          'label' => t('The status'),
+        ),
       ),
       'module' => 'Facebook-style Statuses',
       'eval input' => array('type'),
@@ -21,7 +24,10 @@ function facebook_status_tags_rules_condition_info() {
     'facebook_status_tags_has_specific_tag_condition' => array(
       'label' => t('Status has specific tag'),
       'arguments' => array(
-        'status' => array('type' => 'facebook_status', 'label' => t('The status')),
+        'status' => array(
+          'type' => 'facebook_status',
+          'label' => t('The status'),
+        ),
       ),
       'module' => 'Facebook-style Statuses',
       'eval input' => array('type', 'tag'),
@@ -63,7 +69,10 @@ function facebook_status_tags_has_specific_tag_condition($status, $settings) {
  * Builds the form for the "status has specific tag" condition.
  */
 function facebook_status_tags_has_specific_tag_condition_form($settings, &$form) {
-  $settings += array('type' => '', 'tag' => '');
+  $settings += array(
+    'type' => '',
+    'tag' => '',
+  );
   $form['settings']['type'] = array(
     '#type' => 'select',
     '#title' => t('Tag type'),
diff --git a/submodules/facebook_status_tags/views/facebook_status_tags.views.inc b/submodules/facebook_status_tags/views/facebook_status_tags.views.inc
index ef498ba..ef3bc52 100644
--- a/submodules/facebook_status_tags/views/facebook_status_tags.views.inc
+++ b/submodules/facebook_status_tags/views/facebook_status_tags.views.inc
@@ -6,7 +6,7 @@
  */
 
 /**
- * Implementation of hook_views_data().
+ * Implements hook_views_data().
  */
 function facebook_status_tags_views_data() {
   $data['facebook_status_tags']['table']['group']  = t('Facebook-style Statuses Tags');
@@ -130,12 +130,12 @@ function facebook_status_tags_views_data() {
 }
 
 /**
- * Implementation of hook_views_handlers().
+ * Implements hook_views_handlers().
  */
 function facebook_status_tags_views_handlers() {
   return array(
     'info' => array(
-      'path' => drupal_get_path('module', 'facebook_status_tags') .'/views',
+      'path' => drupal_get_path('module', 'facebook_status_tags') . '/views',
     ),
     'handlers' => array(
       'facebook_status_tags_views_handler_argument_has_this_tag' => array(
diff --git a/submodules/facebook_status_tags/views/facebook_status_tags.views_default.inc b/submodules/facebook_status_tags/views/facebook_status_tags.views_default.inc
index 44ddf9e..36544c7 100644
--- a/submodules/facebook_status_tags/views/facebook_status_tags.views_default.inc
+++ b/submodules/facebook_status_tags/views/facebook_status_tags.views_default.inc
@@ -6,7 +6,7 @@
  */
 
 /**
- * Implementation of hook_views_default_views().
+ * Implements hook_views_default_views().
  */
 function facebook_status_tags_views_default_views() {
   $view = new view;
@@ -179,7 +179,7 @@ function facebook_status_tags_views_default_views() {
       'validate_argument_node_access' => 0,
       'validate_argument_nid_type' => 'nid',
       'validate_argument_vocabulary' => array(
-        variable_get('facebook_status_tags_vid', -1) .'' => variable_get('facebook_status_tags_vid', -1),
+        variable_get('facebook_status_tags_vid', -1) . '' => variable_get('facebook_status_tags_vid', -1),
       ),
       'validate_argument_type' => 'name',
       'validate_argument_transform' => 0,
diff --git a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_argument_has_this_tag.inc b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_argument_has_this_tag.inc
index 3196761..537cef7 100644
--- a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_argument_has_this_tag.inc
+++ b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_argument_has_this_tag.inc
@@ -30,7 +30,7 @@ class facebook_status_tags_views_handler_argument_has_this_tag extends views_han
     );
     $form['facebook_status_tags_type'] = array(
       '#title' => t('Tag types'),
-      '#type'  => 'checkboxes',
+      '#type' => 'checkboxes',
       '#required' => TRUE,
       '#options' => $opt,
       '#default_value' => $options['facebook_status_tags_type'],
@@ -67,7 +67,7 @@ class facebook_status_tags_views_handler_argument_has_this_tag extends views_han
           $types[] = $type;
         }
       }
-      $where .= implode("' OR type = '", $types) ."')";
+      $where .= implode("' OR type = '", $types) . "')";
     }
     $query = "$field IN (SELECT sid FROM {facebook_status_tags} WHERE name = '%s' $where)";
     $this->query->add_where(0, db_prefix_tables($query), $argument);
diff --git a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_argument_has_this_tag_id.inc b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_argument_has_this_tag_id.inc
index 4afca34..e314680 100644
--- a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_argument_has_this_tag_id.inc
+++ b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_argument_has_this_tag_id.inc
@@ -30,7 +30,7 @@ class facebook_status_tags_views_handler_argument_has_this_tag_id extends views_
     );
     $form['facebook_status_tags_type'] = array(
       '#title' => t('Tag types'),
-      '#type'  => 'checkboxes',
+      '#type' => 'checkboxes',
       '#required' => TRUE,
       '#options' => $opt,
       '#default_value' => $options['facebook_status_tags_type'],
@@ -54,49 +54,49 @@ class facebook_status_tags_views_handler_argument_has_this_tag_id extends views_
           $types[] = $type;
         }
       }
-      $where .= implode("' OR type = '", $types) ."')";
+      $where .= implode("' OR type = '", $types) . "')";
     }
     //if ($this->operator == 'or') {
-      if (count($this->value) > 2) {
-        $operator = empty($this->options['not']) ? 'IN' : 'NOT IN';
-        $placeholders = implode(', ', array_fill(0, sizeof($this->value), '%d'));
-        $query = "$this->table_alias.$this->real_field IN (SELECT sid FROM {facebook_status_tags} WHERE rid $operator ($placeholders) $where)";
-        $this->query->add_where(0, db_prefix_tables($query), $this->value);
-      }
-      // If there are exactly 2 users specified, show the exchange between them.
-      if (count($this->value) == 2) {
-        $operator = empty($this->options['not']) ? 'IN' : 'NOT IN';
-        $placeholders = implode(', ', array_fill(0, sizeof($this->value), '%d'));
-        $query = "$this->table_alias.$this->real_field IN (SELECT sid FROM {facebook_status_tags} WHERE rid $operator ($placeholders) $where)";
-        $query .= "AND $this->table_alias.pid IN (%d, %d)";
-        $this->query->add_where(0, db_prefix_tables($query), array_merge($this->value, $this->value));
-      }
-      else {
-        $operator = empty($this->options['not']) ? '=' : '!=';
-        $query = "$this->table_alias.$this->real_field IN (SELECT sid FROM {facebook_status_tags} WHERE rid $operator %d $where)";
-        $this->query->add_where(0, db_prefix_tables($query), $this->argument);
-      }
+    if (count($this->value) > 2) {
+      $operator = empty($this->options['not']) ? 'IN' : 'NOT IN';
+      $placeholders = implode(', ', array_fill(0, sizeof($this->value), '%d'));
+      $query = "$this->table_alias.$this->real_field IN (SELECT sid FROM {facebook_status_tags} WHERE rid $operator ($placeholders) $where)";
+      $this->query->add_where(0, db_prefix_tables($query), $this->value);
+    }
+    // If there are exactly 2 users specified, show the exchange between them.
+    if (count($this->value) == 2) {
+      $operator = empty($this->options['not']) ? 'IN' : 'NOT IN';
+      $placeholders = implode(', ', array_fill(0, sizeof($this->value), '%d'));
+      $query = "$this->table_alias.$this->real_field IN (SELECT sid FROM {facebook_status_tags} WHERE rid $operator ($placeholders) $where)";
+      $query .= "AND $this->table_alias.pid IN (%d, %d)";
+      $this->query->add_where(0, db_prefix_tables($query), array_merge($this->value, $this->value));
+    }
+    else {
+      $operator = empty($this->options['not']) ? '=' : '!=';
+      $query = "$this->table_alias.$this->real_field IN (SELECT sid FROM {facebook_status_tags} WHERE rid $operator %d $where)";
+      $this->query->add_where(0, db_prefix_tables($query), $this->argument);
+    }
     //}
     /*
      * Default to the "OR" behavior because it's more useful.
      * We can never actually allow either to happen because modern browsers
      * convert "+" to " " so we can't parse for the operator.
-    else { //$this->operator == 'and'
-      $operator = empty($this->options['not']) ? '=' : '!=';
-      if (count($this->value) > 1) {
-        //This causes the query to be pretty slow.
-        $subquery = array();
-        foreach ($this->value as $value) {
-          $subquery[] = "$this->table_alias.$this->real_field IN (SELECT sid FROM {facebook_status_tags} WHERE rid $operator %d $where)";
-        }
-        $query = '('. implode(' AND ', $subquery) .')';
-        $this->query->add_where(0, db_prefix_tables($query), $this->value);
-      }
-      else {
-        $query = "$this->table_alias.$this->real_field IN (SELECT sid FROM {facebook_status_tags} WHERE rid $operator %d $where)";
-        $this->query->add_where(0, db_prefix_tables($query), $this->argument);
-      }
-    }
+     else { //$this->operator == 'and'
+     $operator = empty($this->options['not']) ? '=' : '!=';
+     if (count($this->value) > 1) {
+     //This causes the query to be pretty slow.
+     $subquery = array();
+     foreach ($this->value as $value) {
+     $subquery[] = "$this->table_alias.$this->real_field IN (SELECT sid FROM {facebook_status_tags} WHERE rid $operator %d $where)";
+     }
+     $query = '('. implode(' AND ', $subquery) .')';
+     $this->query->add_where(0, db_prefix_tables($query), $this->value);
+     }
+     else {
+     $query = "$this->table_alias.$this->real_field IN (SELECT sid FROM {facebook_status_tags} WHERE rid $operator %d $where)";
+     $this->query->add_where(0, db_prefix_tables($query), $this->argument);
+     }
+     }
      */
   }
   function default_actions($which = NULL) {
diff --git a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_field_all_terms.inc b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_field_all_terms.inc
index d342de6..6738b60 100644
--- a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_field_all_terms.inc
+++ b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_field_all_terms.inc
@@ -34,7 +34,7 @@ class facebook_status_tags_views_handler_field_all_terms extends views_handler_f
     $options = $this->options;
     $form['facebook_status_tags_type'] = array(
       '#title' => t('Tag types'),
-      '#type'  => 'checkboxes',
+      '#type' => 'checkboxes',
       '#description' => t('Which tag types should be shown in this field?'),
       '#required' => TRUE,
       '#options' => $opt,
@@ -63,7 +63,7 @@ class facebook_status_tags_views_handler_field_all_terms extends views_handler_f
           $types[] = $type;
         }
       }
-      $query .= implode("' OR type = '", $types) ."')";
+      $query .= implode("' OR type = '", $types) . "')";
     }
     $query .= " ORDER BY type ASC, name ASC";
     $result = db_query($query, $sid);
@@ -83,7 +83,7 @@ class facebook_status_tags_views_handler_field_all_terms extends views_handler_f
           $tags[] = $prefix . l($tag->name, _facebook_status_tags_resolve($tag));
         }
         elseif ($tag->type == 'user') {
-          $tags[] = $prefix . theme('username', _facebook_status_user_load($tag->tid));
+          $tags[] = $prefix . theme('username', array('account' => _facebook_status_user_load($tag->tid)));
         }
         else {
           $tags[] = check_plain($tag->name);
diff --git a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_field_message.inc b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_field_message.inc
index 808fa06..db5bab1 100644
--- a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_field_message.inc
+++ b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_field_message.inc
@@ -14,6 +14,6 @@ class facebook_status_tags_views_handler_field_message extends views_handler_fie
     if (variable_get('facebook_status_nl2br', 0)) {
       $message = nl2br($message);
     }
-    return '<span class="facebook-status-content">'. facebook_status_tags_process_message($message) .'</span>';
+    return '<span class="facebook-status-content">' . facebook_status_tags_process_message($message) . '</span>';
   }
 }
diff --git a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_field_name.inc b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_field_name.inc
index 9c6f3ad..4b6e7b8 100644
--- a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_field_name.inc
+++ b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_field_name.inc
@@ -61,7 +61,7 @@ class facebook_status_tags_views_handler_field_name extends views_handler_field
         $tags[] = $prefix . l($tag->name, _facebook_status_tags_resolve($tag));
       }
       elseif ($tag->type == 'user') {
-        $tags[] = $prefix . theme('username', _facebook_status_user_load($tag->tid));
+        $tags[] = $prefix . theme('username', array('account' => _facebook_status_user_load($tag->tid)));
       }
       else {
         $tags[] = check_plain($tag->name);
diff --git a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_filter_has_tag.inc b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_filter_has_tag.inc
index d3baee3..f7eed64 100644
--- a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_filter_has_tag.inc
+++ b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_filter_has_tag.inc
@@ -37,7 +37,7 @@ class facebook_status_tags_views_handler_filter_has_tag extends views_handler_fi
     );
     $form['facebook_status_tags_type'] = array(
       '#title' => t('Tag types'),
-      '#type'  => 'checkboxes',
+      '#type' => 'checkboxes',
       '#required' => TRUE,
       '#options' => $opt,
       '#default_value' => $options['facebook_status_tags_type'],
@@ -55,7 +55,7 @@ class facebook_status_tags_views_handler_filter_has_tag extends views_handler_fi
           $types[] = $type;
         }
       }
-      $query .= implode("' OR type = '", $types) ."'";
+      $query .= implode("' OR type = '", $types) . "'";
     }
     $query .= ')';
     $this->query->add_where(0, db_prefix_tables($query));
diff --git a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_filter_has_this_tag.inc b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_filter_has_this_tag.inc
index 8cc06a9..ae738a5 100644
--- a/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_filter_has_this_tag.inc
+++ b/submodules/facebook_status_tags/views/facebook_status_tags_views_handler_filter_has_this_tag.inc
@@ -30,7 +30,7 @@ class facebook_status_tags_views_handler_filter_has_this_tag extends views_handl
     );
     $form['facebook_status_tags_type'] = array(
       '#title' => t('Tag types'),
-      '#type'  => 'checkboxes',
+      '#type' => 'checkboxes',
       '#required' => TRUE,
       '#options' => $opt,
       '#default_value' => $options['facebook_status_tags_type'],
@@ -50,7 +50,7 @@ class facebook_status_tags_views_handler_filter_has_this_tag extends views_handl
           $types[] = $type;
         }
       }
-      $where .= implode("' OR type = '", $types) ."')";
+      $where .= implode("' OR type = '", $types) . "')";
     }
     $info = $this->operators();
     if (!empty($info[$this->operator]['method'])) {
diff --git a/submodules/fbss_activity/fbss_activity.info b/submodules/fbss_activity/fbss_activity.info
index 12db3b4..5dab64b 100644
--- a/submodules/fbss_activity/fbss_activity.info
+++ b/submodules/fbss_activity/fbss_activity.info
@@ -3,4 +3,5 @@ description = "Integrates Activity 2 with Facebook-style Statuses."
 package = Facebook-style Statuses
 dependencies[] = facebook_status
 dependencies[] = activity
-core = 6.x
\ No newline at end of file
+core = 7.x
+files[] = fbss_activity.module
diff --git a/submodules/fbss_activity/fbss_activity.module b/submodules/fbss_activity/fbss_activity.module
index 09a24eb..e3d175e 100644
--- a/submodules/fbss_activity/fbss_activity.module
+++ b/submodules/fbss_activity/fbss_activity.module
@@ -6,10 +6,10 @@
  */
 
 /**
- * Implementation of hook_facebook_status_delete().
+ * Implements hook_facebook_status_delete().
  */
 function fbss_activity_facebook_status_delete($sid) {
-  $result = db_query("SELECT aid FROM {activity} WHERE type = 'facebook_status' AND eid = %d", $sid);
+  $result = db_query("SELECT aid FROM {activity} WHERE type = :type AND eid = :eid", array(':type' => 'facebook_status', ':eid' => $sid));
   $records = array();
   while ($record = db_fetch_object($result)) {
     $records[] = $record->aid;
@@ -32,7 +32,10 @@ function facebook_status_activity_info() {
   $info->name = 'facebook_status';
   $info->object_type = 'facebook_status';
   $info->eid_field = 'sid';
-  $info->objects = array('Recipient' => 'facebook_status', 'Sender' => 'sender');
+  $info->objects = array(
+    'Recipient' => 'facebook_status',
+    'Sender' => 'sender',
+  );
   $hooks = array('fbss_deleted', 'fbss_edited');
   foreach (facebook_status_all_contexts() as $type => $details) {
     if ($type == 'user') {
@@ -40,11 +43,14 @@ function facebook_status_activity_info() {
       $hooks[] = 'fbss_submitted_user_other';
     }
     else {
-      $hooks[] = 'fbss_submitted_'. $type;
+      $hooks[] = 'fbss_submitted_' . $type;
     }
   }
   $info->hooks = array('facebook_status' => $hooks);
-  $info->realms = array('facebook_status_sender' => 'Facebook-style Statuses Sender', 'facebook_status_recipient' => 'Facebook-style Statuses Recipient');
+  $info->realms = array(
+    'facebook_status_sender' => 'Facebook-style Statuses Sender',
+    'facebook_status_recipient' => 'Facebook-style Statuses Recipient',
+  );
   return $info;
 }
 
@@ -55,7 +61,7 @@ function facebook_status_activity_grants($activity) {
   $realms = array();
   if ($activity->type == 'facebook_status') {
     $realms['facebook_status_sender'] = array($activity->uid);
-    $result = db_fetch_object(db_query("SELECT recipient FROM {facebook_status} WHERE sid = %d", $activity->eid));
+    $result = db_fetch_object(db_query("SELECT recipient FROM {facebook_status} WHERE sid = :sid", array(':sid' => $activity->eid)));
     $realms['facebook_status_recipient'] = array($result->recipient);
   }
   return $realms;
@@ -77,32 +83,22 @@ function facebook_status_activity_access_grants($account) {
 function facebook_status_list_activity_actions($hook, $op, $max_age) {
   $actions = array();
   if (!empty($max_age)) {
-    $min_time = time() - $max_age;
+    $min_time = REQUEST_TIME - $max_age;
   }
   else {
     $min_time = 0;
   }
 
   if ($op == 'fbss_submitted_user_self') {
-    $result = db_query(
-      "SELECT sid as id, created, sender as actor FROM {facebook_status} WHERE created > %d AND type = 'user' AND sender = recipient",
-      $min_time
-    );
+    $result = db_query("SELECT sid as id, created, sender as actor FROM {facebook_status} WHERE created > :created AND type = :type AND sender = :sender", array(':created' => $min_time, ':type' => 'user', ':sender' => recipient));
   }
   elseif ($op == 'fbss_submitted_user_other') {
-    $result = db_query(
-      "SELECT sid as id, created, sender as actor FROM {facebook_status} WHERE created > %d AND type = 'user' AND sender <> recipient",
-      $min_time
-    );
+    $result = db_query("SELECT sid as id, created, sender as actor FROM {facebook_status} WHERE created > :created AND type = :type AND sender <> :sender", array(':created' => $min_time, ':type' => 'user', ':sender' => recipient));
   }
   elseif (strpos($op, 'fbss_submitted_') === 0) {
     foreach (facebook_status_all_contexts() as $type => $details) {
-      if ($op == 'fbss_submitted_'. $type) {
-        $result = db_query(
-          "SELECT sid as id, created, sender as actor FROM {facebook_status} WHERE created > %d AND type = '%s'",
-          $min_time,
-          $type
-        );
+      if ($op == 'fbss_submitted_' . $type) {
+        $result = db_query("SELECT sid as id, created, sender as actor FROM {facebook_status} WHERE created > :created AND type = :type", array(':created' => $min_time, ':type' => $type));
         break;
       }
     }
diff --git a/submodules/fbss_comments/fbss_comments.edit.inc b/submodules/fbss_comments/fbss_comments.edit.inc
index 70e829d..884db63 100644
--- a/submodules/fbss_comments/fbss_comments.edit.inc
+++ b/submodules/fbss_comments/fbss_comments.edit.inc
@@ -11,7 +11,7 @@
  * @param $comment
  *   The comment object for the status comment being edited.
  */
-function fbss_comments_edit($form_state, $comment) {
+function fbss_comments_edit($form, $form_state, $comment) {
   $form = array();
   $form['status-comment-edit'] = array(
     '#type' => 'textarea',
@@ -31,7 +31,14 @@ function fbss_comments_edit($form_state, $comment) {
  * The submit handler for the edit form for status comments.
  */
 function fbss_comments_edit_submit($form, &$form_state) {
-  db_query("UPDATE {fbss_comments} SET comment = '%s' WHERE cid = %d", $form_state['values']['status-comment-edit'], $form['#cid']);
+  // TODO Please review the conversion of this statement to the D7 database API syntax.
+  /* db_query("UPDATE {fbss_comments} SET comment = '%s' WHERE cid = %d", $form_state['values']['status-comment-edit'], $form['#cid']) */
+  db_update('fbss_comments')
+  ->fields(array(
+    'comment' => $form_state['values']['status-comment-edit'],
+  ))
+  ->condition('cid', $form['#cid'])
+  ->execute();
   $c = fbssc_load($form['#cid']);
   module_invoke_all('fbss_comments_after_save', $c, TRUE);
   if ($_GET['destination'] && $_GET['destinaton'] != 'fbss_comments/js/refresh') {
@@ -49,11 +56,11 @@ function fbss_comments_edit_submit($form, &$form_state) {
  * @param $comment
  *   The comment object for the status comment being deleted.
  */
-function fbss_comments_delete($form_state, $comment) {
+function fbss_comments_delete($form, $form_state, $comment) {
   $form = array();
   $form['infotext'] = array(
-    '#value' => '<p>'. t('Are you sure you want to permanently delete the status comment %comment?',
-      array('%comment' => $comment->comment)) .'</p>'
+    '#value' => '<p>' . t('Are you sure you want to permanently delete the status comment %comment?',
+      array('%comment' => $comment->comment)) . '</p>',
   );
   $form['confirm'] = array(
     '#type' => 'submit',
diff --git a/submodules/fbss_comments/fbss_comments.info b/submodules/fbss_comments/fbss_comments.info
index 0c202ef..0865883 100644
--- a/submodules/fbss_comments/fbss_comments.info
+++ b/submodules/fbss_comments/fbss_comments.info
@@ -2,4 +2,12 @@ name = Facebook-style Statuses Comments
 description = "Allows comments on Facebook-style Statuses."
 dependencies[] = facebook_status
 package = Facebook-style Statuses
-core = 6.x
+core = 7.x
+
+files[] = fbss_comments.edit.inc
+files[] = fbss_comments.install
+files[] = fbss_comments.module
+files[] = fbss_comments.views.inc
+files[] = fbss_comments_views_handler_field_cc.inc
+files[] = fbss_comments_views_handler_field_cc2.inc
+files[] = fbss_comments_views_handler_field_comment_box.inc
diff --git a/submodules/fbss_comments/fbss_comments.install b/submodules/fbss_comments/fbss_comments.install
index 1e3ceb8..850b7d6 100644
--- a/submodules/fbss_comments/fbss_comments.install
+++ b/submodules/fbss_comments/fbss_comments.install
@@ -6,7 +6,7 @@
  */
 
 /**
- * Implementation of hook_schema().
+ * Implements hook_schema().
  */
 function fbss_comments_schema() {
   $schema = array();
@@ -56,13 +56,14 @@ function fbss_comments_schema() {
 }
 
 /**
- * Implementation of hook_install().
+ * Implements hook_install().
  */
 function fbss_comments_install() {
   if (module_exists('fbssc')) {
     module_disable(array('fbssc'));
   }
-  drupal_install_schema('fbss_comments');
+  // TODO The drupal_(un)install_schema functions are called automatically in D7.
+  // drupal_install_schema('fbss_comments')
   if (db_table_exists('fbssc')) {
     db_query("
       INSERT INTO {fbss_comments} (cid, sid, uid, created, comment)
@@ -70,16 +71,17 @@ function fbss_comments_install() {
       FROM {fbssc} as old
       ORDER BY old.cid ASC
     ");
-    drupal_uninstall_module('fbssc');
-    drupal_set_message(st('The Facebook-style Statuses Comments module has been upgraded.') .' '.
+    drupal_uninstall_modules(array('fbssc'));
+    drupal_set_message(st('The Facebook-style Statuses Comments module has been upgraded.') . ' ' .
       st('You should remove the "fbssc" folder from your modules directory to ensure you do not confuse it with the new version, which is part of the main Facebook-style Statuses package.')
     );
   }
 }
 
 /**
- * Implementation of hook_uninstall().
+ * Implements hook_uninstall().
  */
 function fbss_comments_uninstall() {
-  drupal_uninstall_schema('fbss_comments');
+  // TODO The drupal_(un)install_schema functions are called automatically in D7.
+  // drupal_uninstall_schema('fbss_comments')
 }
diff --git a/submodules/fbss_comments/fbss_comments.module b/submodules/fbss_comments/fbss_comments.module
index 34ba54f..c127d5b 100644
--- a/submodules/fbss_comments/fbss_comments.module
+++ b/submodules/fbss_comments/fbss_comments.module
@@ -22,18 +22,18 @@
 //===============
 
 /**
- * Implementation of hook_init().
+ * Implements hook_init().
  */
 function fbss_comments_init() {
-  if (strpos($_GET['q'], 'admin/build/views/edit') !== FALSE) {
+  if (strpos($_GET['q'], 'admin/structure/views/edit') !== FALSE) {
     $path = drupal_get_path('module', 'fbss_comments');
-    drupal_add_js($path .'/fbss_comments.js');
-    drupal_add_css($path .'/fbss_comments.css');
+    drupal_add_js($path . '/fbss_comments.js');
+    drupal_add_css($path . '/fbss_comments.css');
   }
 }
 
 /**
- * Implementation of hook_menu().
+ * Implements hook_menu().
  */
 function fbss_comments_menu() {
   $items = array();
@@ -65,50 +65,84 @@ function fbss_comments_menu() {
 }
 
 /**
- * Implementation of hook_user().
+ * Implements hook_user_cancel().
  */
-function fbss_comments_user($op, &$edit, &$account, $category = NULL) {
-  if ($op == 'delete') {
-    db_query("DELETE FROM {fbss_comments} WHERE uid = %d", $account->uid);
+function fbss_comments_user_cancel($edit, $account, $method) {
+  if (TRUE) {
+    // TODO Please review the conversion of this statement to the D7 database API syntax.
+    /* db_query("DELETE FROM {fbss_comments} WHERE uid = %d", $account->uid) */
+    db_delete('fbss_comments')
+  ->condition('uid', $account->uid)
+  ->execute();
   }
 }
 
 /**
- * Implementation of hook_perm().
+ * Implements hook_user().
  */
-function fbss_comments_perm() {
-  return array('delete all status comments',
-               'delete own status comments',
-               'delete comments on own statuses',
-               'edit all status comments',
-               'edit own status comments',
-               'edit comments on own statuses',
-               'post status comment',
-               'view all status comments',
+function fbss_comments_user_OLD($op, &$edit, &$account, $category = NULL) { }
+
+/**
+ * Implements hook_permission().
+ */
+function fbss_comments_permission() {
+  return array(
+    'delete all status comments' => array(
+      'title' => t('delete all status comments'),
+      'description' => t('TODO Add a description for \'delete all status comments\''),
+    ),
+    'delete own status comments' => array(
+      'title' => t('delete own status comments'),
+      'description' => t('TODO Add a description for \'delete own status comments\''),
+    ),
+    'delete comments on own statuses' => array(
+      'title' => t('delete comments on own statuses'),
+      'description' => t('TODO Add a description for \'delete comments on own statuses\''),
+    ),
+    'edit all status comments' => array(
+      'title' => t('edit all status comments'),
+      'description' => t('TODO Add a description for \'edit all status comments\''),
+    ),
+    'edit own status comments' => array(
+      'title' => t('edit own status comments'),
+      'description' => t('TODO Add a description for \'edit own status comments\''),
+    ),
+    'edit comments on own statuses' => array(
+      'title' => t('edit comments on own statuses'),
+      'description' => t('TODO Add a description for \'edit comments on own statuses\''),
+    ),
+    'post status comment' => array(
+      'title' => t('post status comment'),
+      'description' => t('TODO Add a description for \'post status comment\''),
+    ),
+    'view all status comments' => array(
+      'title' => t('view all status comments'),
+      'description' => t('TODO Add a description for \'view all status comments\''),
+    ),
   );
 }
 
 /**
- * Implementation of hook_theme().
+ * Implements hook_theme().
  */
 function fbss_comments_theme($existing, $type, $theme, $path) {
   return array(
     'fbss_comments_item' => array(
-      'arguments' => array(
+      'variables' => array(
         'comment' => NULL,
         'classes' => array(),
         'destination' => '',
       ),
     ),
     'fbss_comments_items' => array(
-      'arguments' => array(
+      'variables' => array(
         'comments' => array(),
         'delay_load' => TRUE,
         'destination' => '',
       ),
     ),
     'fbss_comments_form_display' => array(
-      'arguments' => array(
+      'variables' => array(
         'sid' => NULL,
         'delay_load_form' => TRUE,
         'delay_load_comments' => TRUE,
@@ -135,19 +169,22 @@ function fbss_comments_theme($existing, $type, $theme, $path) {
  *   The fully themed status comment or FALSE if the current user does not have
  *   permission to view the comment.
  */
-function theme_fbss_comments_item($comment, $classes = array(), $destination = '') {
+function theme_fbss_comments_item($variables) {
+  $comment = $variables['comment'];
+  $classes = $variables['classes'];
+  $destination = $variables['destination'];
   if (!fbss_comments_can_view($comment)) {
-      return FALSE;
+    return FALSE;
   }
   array_unshift($classes, 'fbss-comments-comment');
   $classes = implode(' ', $classes);
-  $output = '<div class="'. $classes .'">';
-  $output .= '<div class="fbss-comments-author">'. theme('username', _facebook_status_user_load($comment->uid)) .'</div>';
+  $output = '<div class="' . $classes . '">';
+  $output .= '<div class="fbss-comments-author">' . theme('username', array('account' => _facebook_status_user_load($comment->uid))) . '</div>';
   $comment_text = _facebook_status_run_filter($comment->comment);
   $comment_text = nl2br($comment_text);
-  $output .= '<div class="fbss-comments-text">'. $comment_text .'</div>';
+  $output .= '<div class="fbss-comments-text">' . $comment_text . '</div>';
   $output .= '<div class="fbss-comments-closure">';
-  $output .= '<span class="fbss-comments-created">'. theme('facebook_status_time', $comment->created) .'</span>';
+  $output .= '<span class="fbss-comments-created">' . theme('facebook_status_time', array('time' => $comment->created)) . '</span>';
   $q = $_GET['q'];
   if ($destination) {
     $q = $destination;
@@ -156,14 +193,14 @@ function theme_fbss_comments_item($comment, $classes = array(), $destination = '
     $q = '<front>';
   }
   if (fbss_comments_can_edit($comment)) {
-    $output .= '<span class="fbss-comments-edit-delete">'.
-      l(t('Edit'), 'statuses/comment/'. $comment->cid .'/edit', array('query' => array('destination' => $q)))
-      .'</span>';
+    $output .= '<span class="fbss-comments-edit-delete">' .
+      l(t('Edit'), 'statuses/comment/' . $comment->cid . '/edit', array('query' => array('destination' => $q)))
+      . '</span>';
   }
   if (fbss_comments_can_delete($comment)) {
-    $output .= '<span class="fbss-comments-edit-delete">'.
-      l(t('Delete'), 'statuses/comment/'. $comment->cid .'/delete', array('query' => array('destination' => $q)))
-      .'</span>';
+    $output .= '<span class="fbss-comments-edit-delete">' .
+      l(t('Delete'), 'statuses/comment/' . $comment->cid . '/delete', array('query' => array('destination' => $q)))
+      . '</span>';
   }
   $output .= '</div></div>';
   // Invokes hook_fbss_comments_render_alter(&$output, $comment).
@@ -189,20 +226,26 @@ function theme_fbss_comments_item($comment, $classes = array(), $destination = '
  * @return
  *   Themed HTML for the status comments.
  */
-function theme_fbss_comments_items($comments, $delay_load = TRUE, $destination = '') {
+function theme_fbss_comments_items($variables) {
+  $comments = $variables['comments'];
+  $delay_load = $variables['delay_load'];
+  $destination = $variables['destination'];
   $count = count($comments);
   if (!$count) {
     return;
   }
   $path = drupal_get_path('module', 'fbss_comments');
-  drupal_add_js($path .'/fbss_comments.js');
+  drupal_add_js($path . '/fbss_comments.js');
   $output = '<div class="fbss-comments">';
   if ($count > 3 && $delay_load) {
-    $options = array('attributes' => array('class' => 'fbss-comments-show-comments-link fbss-comments-show-comments', 'id' => 'fbss-comments-toggle-'. $comments[0]->sid));
+    $options = array('attributes' => array(
+        'class' => 'fbss-comments-show-comments-link fbss-comments-show-comments',
+        'id' => 'fbss-comments-toggle-' . $comments[0]->sid,
+      ));
     if ($count > 9) {
       $options['attributes']['class'] = 'fbss-comments-show-comments-link';
     }
-    $output .= l(t('Show all @count comments', array('@count' => $count)), 'statuses/'. $comments[0]->sid, $options);
+    $output .= l(t('Show all @count comments', array('@count' => $count)), 'statuses/' . $comments[0]->sid, $options);
   }
   foreach ($comments as $key => $comment) {
     $classes = array();
@@ -222,7 +265,7 @@ function theme_fbss_comments_items($comments, $delay_load = TRUE, $destination =
       $classes[] = 'fbss-comments-hide';
     }
     if (!$delay_load || $count < 10 || $key == $count - 1 || $key == $count - 2) {
-      $output .= theme('fbss_comments_item', $comment, $classes, $destination);
+      $output .= theme('fbss_comments_item', array('comment' => $comment, 'classes' => $classes, 'destination' => $destination));
     }
   }
   $output .= '</div>';
@@ -251,18 +294,21 @@ function theme_fbss_comments_items($comments, $delay_load = TRUE, $destination =
  * @return
  *   Themed HTML for the status form.
  */
-function theme_fbss_comments_form_display($sid, $delay_load_form = TRUE, $delay_load_comments = TRUE) {
+function theme_fbss_comments_form_display($variables) {
+  $sid = $variables['sid'];
+  $delay_load_form = $variables['delay_load_form'];
+  $delay_load_comments = $variables['delay_load_comments'];
   if (fbss_comments_can_post(facebook_status_load($sid))) {
     $path = drupal_get_path('module', 'fbss_comments');
-    drupal_add_js($path .'/fbss_comments.js');
+    drupal_add_js($path . '/fbss_comments.js');
     $output = '';
     if ($delay_load_form && !fbss_comments_count_comments($sid)) {
-      $output = '<div class="fbss-comments-show-comment-form" id="fbss-comments-toggle-'. $sid .'">'.
-        l(t('Comment'), 'statuses/'. $sid, array('attributes' => array('class' => 'fbss-comments-show-comment-form-link')))
-        .'</div>';
-        return $output .'<div class="fbss-comments-hide fbss-comments-form">'. drupal_get_form('fbss_comments_box', $sid, $delay_load_comments) .'</div>';
+      $output = '<div class="fbss-comments-show-comment-form" id="fbss-comments-toggle-' . $sid . '">' .
+        l(t('Comment'), 'statuses/' . $sid, array('attributes' => array('class' => 'fbss-comments-show-comment-form-link')))
+        . '</div>';
+      return $output . '<div class="fbss-comments-hide fbss-comments-form">' . drupal_get_form('fbss_comments_box', $sid, $delay_load_comments) . '</div>';
     }
-    return '<div class="fbss-comments-form">'. drupal_get_form('fbss_comments_box', $sid, $delay_load_comments) .'</div>';
+    return '<div class="fbss-comments-form">' . drupal_get_form('fbss_comments_box', $sid, $delay_load_comments) . '</div>';
   }
 }
 
@@ -278,11 +324,16 @@ function theme_fbss_comments_form_display($sid, $delay_load_form = TRUE, $delay_
  * @return
  *   A full status comment object.
  */
-function fbss_comments_load($cid) {
-  if (!is_numeric($cid)) {
-    return;
+function fbss_comments_load($cids) {
+  foreach ($cids as $nid => &$cid) {
+    if (!is_numeric($cid)) {
+      return;
+    }
+    $node_additions = db_fetch_object(db_query("SELECT * FROM {fbss_comments} WHERE cid = :cid", array(':cid' => $cid)));
+    foreach ($node_additions as $property => &$value) {
+      $cid->$property = $value;
+    }
   }
-  return db_fetch_object(db_query("SELECT * FROM {fbss_comments} WHERE cid = %d", $cid));
 }
 
 /**
@@ -294,7 +345,7 @@ function fbss_comments_load($cid) {
  *   An array of comment objects for the relative thread.
  */
 function fbss_comments_get_comments($sid) {
-  $result = db_query("SELECT * FROM {fbss_comments} WHERE sid = %d ORDER BY created ASC, cid ASC", $sid);
+  $result = db_query("SELECT * FROM {fbss_comments} WHERE sid = :sid ORDER BY created ASC, cid ASC", array(':sid' => $sid));
   $results = array();
   while ($comment = db_fetch_object($result)) {
     $results[] = $comment;
@@ -314,7 +365,12 @@ function fbss_comments_save_comment($sid, $comment, $uid = NULL) {
   if (!$uid) {
     $uid = $GLOBALS['user']->uid;
   }
-  $c = (object) array('sid' => $sid, 'uid' => $uid, 'created' => time(), 'comment' => $comment);
+  $c = (object) array(
+    'sid' => $sid,
+    'uid' => $uid,
+    'created' => REQUEST_TIME,
+    'comment' => $comment,
+  );
   drupal_write_record('fbss_comments', $c);
   module_invoke_all('fbss_comments_after_save', $c, FALSE);
   return $c;
@@ -327,7 +383,11 @@ function fbss_comments_save_comment($sid, $comment, $uid = NULL) {
  *   The comment ID.
  */
 function fbss_comments_delete_comment($cid) {
-  db_query("DELETE FROM {fbss_comments} WHERE cid = %d", $cid);
+  // TODO Please review the conversion of this statement to the D7 database API syntax.
+  /* db_query("DELETE FROM {fbss_comments} WHERE cid = %d", $cid) */
+  db_delete('fbss_comments')
+  ->condition('cid', $cid)
+  ->execute();
   module_invoke_all('fbss_comments_delete', $cid);
 }
 
@@ -335,7 +395,7 @@ function fbss_comments_delete_comment($cid) {
  * Counts the number of comments on a status.
  */
 function fbss_comments_count_comments($sid) {
-  return db_result(db_query("SELECT COUNT(cid) FROM {fbss_comments} WHERE sid = %d", $sid));
+  return db_query("SELECT COUNT(cid) FROM {fbss_comments} WHERE sid = :sid", array(':sid' => $sid))->fetchField();
 }
 
 /**
@@ -353,7 +413,7 @@ function fbss_comments_has_commented($sid, $uid = NULL) {
   if (!$uid) {
     $uid = $GLOBALS['user']->uid;
   }
-  $result = db_result(db_query("SELECT COUNT(cid) FROM {fbss_comments} WHERE sid = %d and uid = %d", $sid, $uid));
+  $result = db_query("SELECT COUNT(cid) FROM {fbss_comments} WHERE sid = :sid and uid = :uid", array(':sid' => $sid, ':uid' => $uid))->fetchField();
   return $result > 0;
 }
 
@@ -472,7 +532,7 @@ function fbss_comments_can_delete($comment, $account = NULL) {
  *   The User ID of the author of the relevant status.
  */
 function _fbss_comments_get_thread_author($sid) {
-  return db_result(db_query("SELECT sender FROM {facebook_status} WHERE sid = %d", $sid));
+  return db_query("SELECT sender FROM {facebook_status} WHERE sid = :sid", array(':sid' => $sid))->fetchField();
 }
 
 //=================
@@ -492,9 +552,9 @@ function _fbss_comments_get_thread_author($sid) {
  *   thread page. If FALSE the "comment" link with delayed comment form loading
  *   will not be used.
  */
-function fbss_comments_box($form_state, $sid, $delay_load = TRUE) {
+function fbss_comments_box($form, $form_state, $sid, $delay_load = TRUE) {
   $path = drupal_get_path('module', 'fbss_comments');
-  drupal_add_css($path .'/fbss_comments.css');
+  drupal_add_css($path . '/fbss_comments.css');
   $form = array();
   if (!isset($form_state['fbss_comments']['q'])) {
     $form['#qu'] = $_GET['q'];
@@ -503,12 +563,12 @@ function fbss_comments_box($form_state, $sid, $delay_load = TRUE) {
     $form['#qu'] = $form_state['fbss_comments']['q'];
   }
   $comments = fbss_comments_get_comments($sid);
-  $form['before'] = array('#value' => '<div id="fbss-comments-replace-'. $sid .'">');
-  $form['comments'] = array('#value' => theme('fbss_comments_items', $comments, $delay_load, $form['#qu']));
+  $form['before'] = array('#value' => '<div id="fbss-comments-replace-' . $sid . '">');
+  $form['comments'] = array('#value' => theme('fbss_comments_items', array('comments' => $comments, 'delay_load' => $delay_load, 'destination' => $form['#qu'])));
   if (count($comments)) {
-    $form['start-hide'] = array('#value' => '<div class="fbss-comments-show-comment-form-inner" id="fbss-comments-inner-toggle-'. $sid .'">'.
-      l(t('Comment'), 'statuses/'. $sid, array('attributes' => array('class' => 'fbss-comments-show-comment-inner-form-link')))
-      .'</div><div class="fbss-comments-hide fbss-comments-replace-inner-'. $sid .'">');
+    $form['start-hide'] = array('#value' => '<div class="fbss-comments-show-comment-form-inner" id="fbss-comments-inner-toggle-' . $sid . '">' .
+      l(t('Comment'), 'statuses/' . $sid, array('attributes' => array('class' => 'fbss-comments-show-comment-inner-form-link')))
+      . '</div><div class="fbss-comments-hide fbss-comments-replace-inner-' . $sid . '">');
   }
   $form['status-comment'] = array(
     '#type' => 'textarea',
@@ -520,7 +580,7 @@ function fbss_comments_box($form_state, $sid, $delay_load = TRUE) {
     '#value' => t('Comment'),
     '#ahah' => array(
       'path' => 'fbss_comments/js/refresh',
-      'wrapper' => 'fbss-comments-replace-'. $sid,
+      'wrapper' => 'fbss-comments-replace-' . $sid,
       'effect' => 'fade',
       'method' => 'replace',
     ),
@@ -550,11 +610,14 @@ function fbss_comments_box_submit($form, &$form_state) {
  * Saves status comments via AHAH.
  */
 function fbss_comments_save_js() {
-  $form_state = array('storage' => NULL, 'submitted' => FALSE);
+  $form_state = array(
+    'storage' => NULL,
+    'submitted' => FALSE,
+  );
   $form_build_id = $_POST['form_build_id'];
   $form = form_get_cache($form_build_id, $form_state);
   $form_state['post'] = $form['#post'] = $_POST;
-  $form['#programmed'] = $form['#redirect'] = FALSE;
+  $form['#programmed'] = $form_state['#redirect'] = FALSE;
   $args = $form['#parameters'];
   // This happens if someone goes directly to the JS processing page.
   if (!is_array($args) && !$args) {
@@ -570,9 +633,10 @@ function fbss_comments_save_js() {
   $new_form['comments']       = $form['comments'];
   $new_form['status-comment'] = $form['status-comment'];
   $new_form['save']           = $form['save'];
+  // TODO Please change this theme call to use an associative array for the $variables parameter.
   $output = theme('status_messages') . drupal_render($new_form);
   // Return the results.
-  drupal_json(array('status' => TRUE, 'data' => $output));
+  drupal_json_output(array('status' => TRUE, 'data' => $output));
 }
 
 //===============
@@ -580,28 +644,32 @@ function fbss_comments_save_js() {
 //===============
 
 /**
- * Implementation of hook_facebook_status_delete().
+ * Implements hook_facebook_status_delete().
  */
 function fbss_comments_facebook_status_delete($sid) {
-  db_query("DELETE FROM {fbss_comments} WHERE sid = %d", $sid);
+  // TODO Please review the conversion of this statement to the D7 database API syntax.
+  /* db_query("DELETE FROM {fbss_comments} WHERE sid = %d", $sid) */
+  db_delete('fbss_comments')
+  ->condition('sid', $sid)
+  ->execute();
 }
 
 /**
- * Implementation of hook_preprocess_facebook_status_item().
+ * Implements hook_preprocess_facebook_status_item().
  */
 function fbss_comments_preprocess_facebook_status_item(&$vars) {
-  $vars['comments'] = theme('fbss_comments_form_display', $status->sid, FALSE, FALSE);
+  $vars['comments'] = theme('fbss_comments_form_display', array('sid' => $status->sid, 'delay_load_form' => FALSE, 'delay_load_comments' => FALSE));
 }
 
 /**
- * Implementation of hook_views_api().
+ * Implements hook_views_api().
  */
 function fbss_comments_views_api() {
   return array('api' => 2);
 }
 
 /**
- * Implementation of hook_views_default_views_alter().
+ * Implements hook_views_default_views_alter().
  */
 function fbss_comments_views_default_views_alter(&$views) {
   foreach ($views as $view) {
diff --git a/submodules/fbss_comments/fbss_comments.views.inc b/submodules/fbss_comments/fbss_comments.views.inc
index f961b72..a7b8e1c 100644
--- a/submodules/fbss_comments/fbss_comments.views.inc
+++ b/submodules/fbss_comments/fbss_comments.views.inc
@@ -6,7 +6,7 @@
  */
 
 /**
- * Implementation of hook_views_data().
+ * Implements hook_views_data().
  */
 function fbss_comments_views_data() {
   // Basic table information.
@@ -156,7 +156,7 @@ function fbss_comments_views_data() {
 }
 
 /**
- * Implementation of hook_views_data_alter().
+ * Implements hook_views_data_alter().
  */
 function fbss_comments_views_data_alter(&$data) {
   $data['fbss_comments']['users'] = array(
@@ -190,7 +190,7 @@ function fbss_comments_views_data_alter(&$data) {
 }
 
 /**
- * Implementation of hook_views_handlers().
+ * Implements hook_views_handlers().
  */
 function fbss_comments_views_handlers() {
   return array(
diff --git a/submodules/fbss_comments/fbss_comments_views_handler_field_cc.inc b/submodules/fbss_comments/fbss_comments_views_handler_field_cc.inc
index 75926aa..4b8ec24 100644
--- a/submodules/fbss_comments/fbss_comments_views_handler_field_cc.inc
+++ b/submodules/fbss_comments/fbss_comments_views_handler_field_cc.inc
@@ -11,7 +11,7 @@
 class fbss_comments_views_handler_field_cc extends views_handler_field {
   function render($values) {
     $sid = $values->{$this->field_alias};
-    $count = db_result(db_query("SELECT COUNT(cid) FROM {fbss_comments} WHERE sid = %d", $sid));
+    $count = db_query("SELECT COUNT(cid) FROM {fbss_comments} WHERE sid = :sid", array(':sid' => $sid))->fetchField();
     return $count;
   }
 }
diff --git a/submodules/fbss_comments/fbss_comments_views_handler_field_cc2.inc b/submodules/fbss_comments/fbss_comments_views_handler_field_cc2.inc
index a295de1..d398499 100644
--- a/submodules/fbss_comments/fbss_comments_views_handler_field_cc2.inc
+++ b/submodules/fbss_comments/fbss_comments_views_handler_field_cc2.inc
@@ -11,7 +11,7 @@
 class fbss_comments_views_handler_field_cc2 extends views_handler_field {
   function render($values) {
     $sid = $values->{$this->field_alias};
-    $count = db_result(db_query("SELECT COUNT(cid) FROM {fbss_comments} WHERE sid = %d", $sid));
+    $count = db_query("SELECT COUNT(cid) FROM {fbss_comments} WHERE sid = :sid", array(':sid' => $sid))->fetchField();
     return format_plural($count, '1 comment', '@count comments');
   }
 }
diff --git a/submodules/fbss_comments/fbss_comments_views_handler_field_comment_box.inc b/submodules/fbss_comments/fbss_comments_views_handler_field_comment_box.inc
index 868d6cc..13897b8 100644
--- a/submodules/fbss_comments/fbss_comments_views_handler_field_comment_box.inc
+++ b/submodules/fbss_comments/fbss_comments_views_handler_field_comment_box.inc
@@ -10,6 +10,6 @@
  */
 class fbss_comments_views_handler_field_comment_box extends views_handler_field {
   function render($values) {
-    return theme('fbss_comments_form_display', $values->facebook_status_sid, TRUE, TRUE);
+    return theme('fbss_comments_form_display', array('sid' => $values->facebook_status_sid, 'delay_load_form' => TRUE, 'delay_load_comments' => TRUE));
   }
 }
diff --git a/submodules/fbss_flag/fbss_flag.flag.inc b/submodules/fbss_flag/fbss_flag.flag.inc
index 9205320..e586b5d 100644
--- a/submodules/fbss_flag/fbss_flag.flag.inc
+++ b/submodules/fbss_flag/fbss_flag.flag.inc
@@ -11,7 +11,7 @@
  * doesn't provide the kind of fancy autoloading that Views does.
  */
 if (!class_exists('flag_flag')) {
-  module_load_include(drupal_get_path('module', 'flag') .'/flag.inc');
+  module_load_include(drupal_get_path('module', 'flag') . '/flag.inc');
 }
 
 /**
diff --git a/submodules/fbss_flag/fbss_flag.info b/submodules/fbss_flag/fbss_flag.info
index ae8fd12..88f97c5 100644
--- a/submodules/fbss_flag/fbss_flag.info
+++ b/submodules/fbss_flag/fbss_flag.info
@@ -3,4 +3,7 @@ description = "Integrates Flag with Facebook-style Statuses."
 package = Facebook-style Statuses
 dependencies[] = facebook_status
 dependencies[] = flag
-core = 6.x
\ No newline at end of file
+core = 7.x
+files[] = fbss_flag.flag.inc
+files[] = fbss_flag.install
+files[] = fbss_flag.module
diff --git a/submodules/fbss_flag/fbss_flag.install b/submodules/fbss_flag/fbss_flag.install
index bbb5f08..d4a7eee 100644
--- a/submodules/fbss_flag/fbss_flag.install
+++ b/submodules/fbss_flag/fbss_flag.install
@@ -6,11 +6,18 @@
  */
 
 /**
- * Implementation of hook_install().
+ * Implements hook_install().
  */
 function fbss_flag_install() {
   // Lower weight so that the Flag module's classes are available to us.
   // We take precautions in fbss_flag.inc to make sure this isn't strictly
   // necessary, but it (probably) doesn't hurt.
-  db_query("UPDATE {system} SET weight = 2 WHERE name = 'fbss_flag'");
+  // TODO Please review the conversion of this statement to the D7 database API syntax.
+  /* db_query("UPDATE {system} SET weight = 2 WHERE name = 'fbss_flag'") */
+  db_update('system')
+  ->fields(array(
+    'weight' =>  2,
+  ))
+  ->condition('name', 'fbss_flag')
+  ->execute();
 }
diff --git a/submodules/fbss_flag/fbss_flag.module b/submodules/fbss_flag/fbss_flag.module
index 1db3360..c30a69e 100644
--- a/submodules/fbss_flag/fbss_flag.module
+++ b/submodules/fbss_flag/fbss_flag.module
@@ -6,15 +6,25 @@
  */
 
 /**
- * Implementation of hook_facebook_status_delete().
+ * Implements hook_facebook_status_delete().
  */
 function fbss_flag_facebook_status_delete($sid) {
-  db_query("DELETE FROM {flag_content} WHERE content_type = 'facebook_status' AND content_id = %d", $sid);
-  db_query("DELETE FROM {flag_counts} WHERE content_type = 'facebook_status' AND content_id = %d", $sid);
+  // TODO Please review the conversion of this statement to the D7 database API syntax.
+  /* db_query("DELETE FROM {flag_content} WHERE content_type = 'facebook_status' AND content_id = %d", $sid) */
+  db_delete('flag_content')
+  ->condition('content_type', 'facebook_status')
+  ->condition('content_id', $sid)
+  ->execute();
+  // TODO Please review the conversion of this statement to the D7 database API syntax.
+  /* db_query("DELETE FROM {flag_counts} WHERE content_type = 'facebook_status' AND content_id = %d", $sid) */
+  db_delete('flag_counts')
+  ->condition('content_type', 'facebook_status')
+  ->condition('content_id', $sid)
+  ->execute();
 }
 
 /**
- * Implementation of hook_flag_definitions().
+ * Implements hook_flag_definitions().
  */
 function fbss_flag_flag_definitions() {
   return array(
@@ -27,7 +37,7 @@ function fbss_flag_flag_definitions() {
 }
 
 /**
- * Implementation of hook_flag_default_flags().
+ * Implements hook_flag_default_flags().
  */
 function fbss_flag_flag_default_flags() {
   $flags = array();
diff --git a/submodules/fbss_mollom/fbss_mollom.info b/submodules/fbss_mollom/fbss_mollom.info
index a3fa3f9..088d2ab 100644
--- a/submodules/fbss_mollom/fbss_mollom.info
+++ b/submodules/fbss_mollom/fbss_mollom.info
@@ -3,4 +3,6 @@ description = "Integrates Mollom with Facebook-style Statuses."
 package = Facebook-style Statuses
 dependencies[] = facebook_status
 dependencies[] = mollom
-core = 6.x
+core = 7.x
+
+files[] = fbss_mollom.module
diff --git a/submodules/fbss_mollom/fbss_mollom.module b/submodules/fbss_mollom/fbss_mollom.module
index e3cb990..d0623a1 100644
--- a/submodules/fbss_mollom/fbss_mollom.module
+++ b/submodules/fbss_mollom/fbss_mollom.module
@@ -6,7 +6,7 @@
  */
 
 /**
- * Implementation of hook_mollom_form_list().
+ * Implements hook_mollom_form_list().
  */
 function fbss_mollom_mollom_form_list() {
   return array(
@@ -34,7 +34,7 @@ function fbss_mollom_mollom_form_list() {
 }
 
 /**
- * Implementation of hook_mollom_form_info().
+ * Implements hook_mollom_form_info().
  */
 function fbss_mollom_mollom_form_info($form_id) {
   if ($form_id == 'facebook_status_box') {
diff --git a/submodules/fbss_pathauto/fbss_pathauto.info b/submodules/fbss_pathauto/fbss_pathauto.info
index 62a1e55..af943e7 100644
--- a/submodules/fbss_pathauto/fbss_pathauto.info
+++ b/submodules/fbss_pathauto/fbss_pathauto.info
@@ -3,4 +3,5 @@ description = "Integrates Pathauto with Facebook-style Statuses."
 package = Facebook-style Statuses
 dependencies[] = facebook_status
 dependencies[] = pathauto
-core = 6.x
\ No newline at end of file
+core = 7.x
+files[] = fbss_pathauto.module
diff --git a/submodules/fbss_pathauto/fbss_pathauto.module b/submodules/fbss_pathauto/fbss_pathauto.module
index c5d1f8a..bbe77b4 100644
--- a/submodules/fbss_pathauto/fbss_pathauto.module
+++ b/submodules/fbss_pathauto/fbss_pathauto.module
@@ -6,20 +6,24 @@
  */
 
 /**
- * Implementation of hook_facebook_status_delete().
+ * Implements hook_facebook_status_delete().
  */
 function fbss_pathauto_facebook_status_delete($sid) {
-  db_query("DELETE FROM {url_alias} WHERE src = 'statuses/%d'", $sid);
+  // TODO Please review the conversion of this statement to the D7 database API syntax.
+  /* db_query("DELETE FROM {url_alias} WHERE src = 'statuses/%d'", $sid) */
+  db_delete('url_alias')
+  ->condition('src', $sid)
+  ->execute();
 }
 
 /**
- * Implementation of hook_facebook_status_save().
+ * Implements hook_facebook_status_save().
  */
 function fbss_pathauto_facebook_status_save($status, $context, $edit = FALSE) {
   $op = $edit ? 'update' : 'insert';
   module_load_include('inc', 'pathauto');
   $placeholders = pathauto_get_placeholders('facebook_status', $status);
-  $src = 'statuses/'. $status->sid;
+  $src = 'statuses/' . $status->sid;
   if ($context['type'] == 'user') {
     $type = ($context['recipient']->{$context['recipient_id']} == $sender->uid) ? 'self' : 'other';
   }
@@ -30,7 +34,7 @@ function fbss_pathauto_facebook_status_save($status, $context, $edit = FALSE) {
 }
 
 /**
- * Implementation of hook_pathauto().
+ * Implements hook_pathauto().
  */
 function fbss_pathauto_pathauto($op) {
   if ($op != 'settings') {
@@ -67,7 +71,7 @@ function fbss_pathauto_pathauto($op) {
 }
 
 /**
- * Implementation of hook_pathauto_bulkupdate().
+ * Implements hook_pathauto_bulkupdate().
  * Inspired by the node implementation in pathauto_node.inc.
  */
 function fbss_pathauto_pathauto_bulkupdate() {
@@ -83,7 +87,7 @@ function fbss_pathauto_pathauto_bulkupdate() {
   // Check for generic pattern.
   if (!trim(variable_get('pathauto_fbss_pathauto_pattern', ''))) {
     foreach ($pattern_types as $type) {
-      if (!trim(variable_get('pathauto_fbss_pathauto_'. $type .'_pattern', ''))) {
+      if (!trim(variable_get('pathauto_fbss_pathauto_' . $type . '_pattern', ''))) {
         unset($pattern_types[$type]);
       }
     }
@@ -95,12 +99,17 @@ function fbss_pathauto_pathauto_bulkupdate() {
       LEFT JOIN {url_alias} alias
         ON CONCAT('statuses/', CAST(fbss.sid AS CHAR)) = alias.src
       WHERE alias.src IS NULL";
-    $result = db_query_range($query, 0, variable_get('pathauto_max_bulk_update', 50));
+    // TODO Please convert this statement to the D7 database API syntax.
+    $result = db_query_range("SELECT fbss.*, alias.src, alias.dst
+      FROM {facebook_status} fbss
+      LEFT JOIN {url_alias} alias
+        ON CONCAT('statuses/', CAST(fbss.sid AS CHAR)) = alias.src
+      WHERE alias.src IS NULL");
     $placeholders = array();
     while ($status = db_fetch_object($result)) {
       // pathauto.inc should already be included.
       $placeholders = pathauto_get_placeholders('facebook_status', $status);
-      $source = 'statuses/'. $status->sid;
+      $source = 'statuses/' . $status->sid;
       $type = ($status->type == 'user' ? (($status->sender == $status->recipient) ? 'self' : 'other') : $status->type);
       if (in_array($type, $pattern_types)) {
         if (pathauto_create_alias('fbss_pathauto', 'bulkupdate', $placeholders, $source, $type)) {
@@ -115,7 +124,7 @@ function fbss_pathauto_pathauto_bulkupdate() {
 }
 
 /**
- * Implementation of hook_path_alias_types().
+ * Implements hook_path_alias_types().
  */
 function fbss_pathauto_path_alias_types() {
   return array(
diff --git a/submodules/fbss_rules/fbss_rules.info b/submodules/fbss_rules/fbss_rules.info
index 0698c21..2f75b14 100644
--- a/submodules/fbss_rules/fbss_rules.info
+++ b/submodules/fbss_rules/fbss_rules.info
@@ -3,4 +3,8 @@ description = "Integrates Rules with Facebook-style Statuses."
 package = Facebook-style Statuses
 dependencies[] = facebook_status
 dependencies[] = rules
-core = 6.x
+core = 7.x
+
+files[] = fbss_rules.module
+files[] = fbss_rules.rules.inc
+files[] = fbss_rules.rules_defaults.inc
diff --git a/submodules/fbss_rules/fbss_rules.module b/submodules/fbss_rules/fbss_rules.module
index e3f81da..e0c5bb0 100644
--- a/submodules/fbss_rules/fbss_rules.module
+++ b/submodules/fbss_rules/fbss_rules.module
@@ -6,14 +6,14 @@
  */
 
 /**
- * Implementation of hook_facebook_status_delete().
+ * Implements hook_facebook_status_delete().
  */
 function fbss_rules_facebook_status_delete($sid) {
   rules_invoke_event('facebook_status_delete', facebook_status_load($sid));
 }
 
 /**
- * Implementation of hook_facebook_status_save().
+ * Implements hook_facebook_status_save().
  */
 function fbss_rules_facebook_status_save($status, $context, $edit) {
   if ($edit) {
diff --git a/submodules/fbss_rules/fbss_rules.rules.inc b/submodules/fbss_rules/fbss_rules.rules.inc
index f744206..d1e3a2b 100644
--- a/submodules/fbss_rules/fbss_rules.rules.inc
+++ b/submodules/fbss_rules/fbss_rules.rules.inc
@@ -7,7 +7,7 @@
  */
 
 /**
- * Implementation of hook_rules_event_info().
+ * Implements hook_rules_event_info().
  */
 function fbss_rules_rules_event_info() {
   return array(
@@ -15,14 +15,20 @@ function fbss_rules_rules_event_info() {
       'label' => t('User deletes a status'),
       'module' => 'Facebook-style Statuses',
       'arguments' => array(
-        'status' => array('type' => 'facebook_status', 'label' => t('The status.')),
+        'status' => array(
+          'type' => 'facebook_status',
+          'label' => t('The status.'),
+        ),
       ),
     ),
     'facebook_status_edit' => array(
       'label' => t('User edits a status'),
       'module' => 'Facebook-style Statuses',
       'arguments' => array(
-        'status' => array('type' => 'facebook_status', 'label' => t('The status.')),
+        'status' => array(
+          'type' => 'facebook_status',
+          'label' => t('The status.'),
+        ),
         //'context' => array('type' => 'value', 'label' => t('The status context.')),
       ),
     ),
@@ -30,7 +36,10 @@ function fbss_rules_rules_event_info() {
       'label' => t('User saves a status'),
       'module' => 'Facebook-style Statuses',
       'arguments' => array(
-        'status' => array('type' => 'facebook_status', 'label' => t('The status.')),
+        'status' => array(
+          'type' => 'facebook_status',
+          'label' => t('The status.'),
+        ),
         //'context' => array('type' => 'value', 'label' => t('The status context.')),
       ),
     ),
@@ -38,36 +47,51 @@ function fbss_rules_rules_event_info() {
 }
 
 /**
- * Implementation of hook_rules_condition_info().
+ * Implements hook_rules_condition_info().
  */
 function fbss_rules_rules_condition_info() {
   return array(
     'fbss_rules_is_self' => array(
       'label' => t('Status was posted to own profile'),
       'arguments' => array(
-        'status' => array('type' => 'facebook_status', 'label' => t('The status')),
+        'status' => array(
+          'type' => 'facebook_status',
+          'label' => t('The status'),
+        ),
       ),
       'module' => 'Facebook-style Statuses',
     ),
     'fbss_rules_can_post' => array(
       'label' => t('User has permission to send a status message'),
       'arguments' => array(
-        'recipient' => array('type' => 'number', 'label' => t('The ID of the object to which the status will be posted.')),
-        'sender' => array('type' => 'user', 'label' => t('Sender')),
+        'recipient' => array(
+          'type' => 'number',
+          'label' => t('The ID of the object to which the status will be posted.'),
+        ),
+        'sender' => array(
+          'type' => 'user',
+          'label' => t('Sender'),
+        ),
       ),
       'module' => 'Facebook-style Statuses',
     ),
     'fbss_rules_rules_condition_can_edit' => array(
       'label' => t('User has permission to edit a status'),
       'arguments' => array(
-        'status' => array('type' => 'facebook_status', 'label' => t('The status')),
+        'status' => array(
+          'type' => 'facebook_status',
+          'label' => t('The status'),
+        ),
       ),
       'module' => 'Facebook-style Statuses',
     ),
     'fbss_rules_rules_condition_can_delete' => array(
       'label' => t('User has permission to delete a status'),
       'arguments' => array(
-        'status' => array('type' => 'facebook_status', 'label' => t('The status')),
+        'status' => array(
+          'type' => 'facebook_status',
+          'label' => t('The status'),
+        ),
       ),
       'module' => 'Facebook-style Statuses',
     ),
@@ -126,14 +150,17 @@ function fbss_rules_rules_condition_can_delete($status) {
 }
 
 /**
- * Implementation of hook_rules_action_info().
+ * Implements hook_rules_action_info().
  */
 function fbss_rules_rules_action_info() {
   return array(
     'fbss_rules_load_action' => array(
       'label' => t('Load a status'),
       'new variables' => array(
-        'status_loaded' => array('type' => 'facebook_status', 'label' => t('Loaded status')),
+        'status_loaded' => array(
+          'type' => 'facebook_status',
+          'label' => t('Loaded status'),
+        ),
       ),
       'help' => t('Enter the Status ID of a status to load.'),
       'module' => 'Facebook-style Statuses',
@@ -184,7 +211,10 @@ function fbss_rules_load_action($settings) {
  * Builds the form for editing a status.
  */
 function fbss_rules_edit_action_form($settings, &$form) {
-  $settings += array('sid' => '', 'message' => '');
+  $settings += array(
+    'sid' => '',
+    'message' => '',
+  );
   $form['settings']['sid'] = array(
     '#type' => 'textfield',
     '#title' => t('Status ID'),
@@ -206,12 +236,20 @@ function fbss_rules_edit_action($settings) {
   $status_old = facebook_status_load($settings['sid']);
   $context = facebook_status_determine_context($status_old->type);
   $new_status = trim($settings['message']);
-  $time = time();
+  $time = REQUEST_TIME;
   global $user;
   // Pretend to have set a new status if the submitted status is exactly the same as the old one.
   if ($new_status != $status_old->message) {
     $sql = "UPDATE {facebook_status} SET message = '%s', created = %d WHERE sid = %d";
-    db_query($sql, $new_status, $time, $status_old->sid);
+    // TODO Please review the conversion of this statement to the D7 database API syntax.
+    /* db_query($sql, $new_status, $time, $status_old->sid) */
+    db_update('facebook_status')
+  ->fields(array(
+    'message' => $new_status,
+    'created' => $time,
+  ))
+  ->condition('sid', $status_old->sid)
+  ->execute();
     // Invokes hook_facebook_status_save($status, $edit).
     $status_old->message = $new_status;
     $status_old->created = $time;
@@ -219,7 +257,7 @@ function fbss_rules_edit_action($settings) {
   }
   // Trigger integration. Don't call if the status is blank because usually nothing interesting is happening.
   if (module_exists('trigger') && !empty($new_status)) {
-    $op = 'fbss_edited_'. $status_old->type;
+    $op = 'fbss_edited_' . $status_old->type;
     if ($status_old->type == 'user') {
       $op .= ($status_old->recipient == $status_old->sender ? '_self' : '_other');
     }
@@ -251,7 +289,12 @@ function fbss_rules_delete_action($settings) {
  * Builds the form for adding a status.
  */
 function fbss_rules_add_action_form($settings, &$form) {
-  $settings += array('sender' => '', 'recipient' => '', 'type' => '', 'message' => '');
+  $settings += array(
+    'sender' => '',
+    'recipient' => '',
+    'type' => '',
+    'message' => '',
+  );
   $form['settings']['sender'] = array(
     '#type' => 'textfield',
     '#title' => t('Sender username'),
@@ -299,7 +342,7 @@ function fbss_rules_add_action($settings) {
 }
 
 /**
- * Implementation of hook_rules_data_type_info().
+ * Implements hook_rules_data_type_info().
  */
 function fbss_rules_rules_data_type_info() {
   return array(
diff --git a/submodules/fbss_rules/fbss_rules.rules_defaults.inc b/submodules/fbss_rules/fbss_rules.rules_defaults.inc
index 200aab6..ea9a518 100644
--- a/submodules/fbss_rules/fbss_rules.rules_defaults.inc
+++ b/submodules/fbss_rules/fbss_rules.rules_defaults.inc
@@ -10,57 +10,44 @@
  */
 function facebook_status_rules_defaults() {
   $config = array(
-    'rules' =>
-    array(
-      'facebook_status_rules_update' =>
-      array(
+    'rules' => array(
+      'facebook_status_rules_update' => array(
         '#type' => 'rule',
         '#set' => 'event_facebook_status_save',
         '#label' => 'Submit Facebook-style Status',
         '#active' => 0,
         '#weight' => '0',
-        '#categories' =>
-        array(
+        '#categories' => array(
           0 => 'facebook_status',
         ),
         '#status' => 'default',
-        '#conditions' =>
-        array(
+        '#conditions' => array(
         ),
-        '#actions' =>
-        array(
-          0 =>
-          array(
+        '#actions' => array(
+          0 => array(
             '#type' => 'action',
-            '#settings' =>
-            array(
+            '#settings' => array(
               'severity' => '6',
               'type' => 'rules',
               'message' => '<?php echo check_plain($account->name); ?> submitted the status <?php echo $new_status; ?>.',
               'link' => '/user/<?php echo $account->uid; ?>',
-              '#eval input' =>
-              array(
-                'rules_input_evaluator_php' =>
-                array(
-                  'message' =>
-                  array(
+              '#eval input' => array(
+                'rules_input_evaluator_php' => array(
+                  'message' => array(
                     0 => 'account',
                     1 => 'new_status',
                   ),
-                  'link' =>
-                  array(
+                  'link' => array(
                     0 => 'account',
                   ),
                 ),
               ),
             ),
             '#name' => 'rules_action_watchdog',
-            '#info' =>
-            array(
+            '#info' => array(
               'label' => 'Log to watchdog',
               'module' => 'System',
-              'eval input' =>
-              array(
+              'eval input' => array(
                 0 => 'type',
                 1 => 'message',
                 2 => 'link',
@@ -70,38 +57,30 @@ function facebook_status_rules_defaults() {
           ),
         ),
       ),
-      'facebook_status_rules_delete' =>
-      array(
+      'facebook_status_rules_delete' => array(
         '#type' => 'rule',
         '#set' => 'event_facebook_status_delete',
         '#label' => 'Delete Facebook-style Status',
         '#active' => 1,
         '#weight' => '0',
-        '#categories' =>
-        array(
+        '#categories' => array(
           0 => 'facebook_status',
         ),
         '#status' => 'default',
-        '#conditions' =>
-        array(
+        '#conditions' => array(
         ),
-        '#actions' =>
-        array(
-          0 =>
-          array(
+        '#actions' => array(
+          0 => array(
             '#type' => 'action',
-            '#settings' =>
-            array(
+            '#settings' => array(
               'message' => 'Status deleted.',
               'error' => 0,
             ),
             '#name' => 'rules_action_drupal_message',
-            '#info' =>
-            array(
+            '#info' => array(
               'label' => 'Show a configurable message on the site',
               'module' => 'System',
-              'eval input' =>
-              array(
+              'eval input' => array(
                 0 => 'message',
               ),
             ),
diff --git a/submodules/fbss_twitter/fbss_twitter.info b/submodules/fbss_twitter/fbss_twitter.info
index f7f1bb9..5a829e9 100644
--- a/submodules/fbss_twitter/fbss_twitter.info
+++ b/submodules/fbss_twitter/fbss_twitter.info
@@ -4,4 +4,7 @@ package = Facebook-style Statuses
 dependencies[] = facebook_status
 dependencies[] = twitter
 dependencies[] = oauth
-core = 6.x
+core = 7.x
+
+files[] = fbss_twitter.install
+files[] = fbss_twitter.module
diff --git a/submodules/fbss_twitter/fbss_twitter.install b/submodules/fbss_twitter/fbss_twitter.install
index 9d16284..c640cdd 100644
--- a/submodules/fbss_twitter/fbss_twitter.install
+++ b/submodules/fbss_twitter/fbss_twitter.install
@@ -6,7 +6,7 @@
  */
 
 /**
- * Implementation of hook_uninstall().
+ * Implements hook_uninstall().
  */
 function fbss_twitter_uninstall() {
   variable_del('fbss_twitter_default');
diff --git a/submodules/fbss_twitter/fbss_twitter.module b/submodules/fbss_twitter/fbss_twitter.module
index 6886992..f882d9d 100644
--- a/submodules/fbss_twitter/fbss_twitter.module
+++ b/submodules/fbss_twitter/fbss_twitter.module
@@ -6,7 +6,7 @@
  */
 
 /**
- * Implementation of hook_form_FORM_ID_alter().
+ * Implements hook_form_FORM_ID_alter().
  */
 function fbss_twitter_form_facebook_status_box_alter(&$form, &$form_state) {
   if ($form_state['facebook_status']['recipient'] != $GLOBALS['user']->uid || $form_state['facebook_status']['type'] != 'user') {
@@ -48,7 +48,7 @@ function fbss_twitter_facebook_status_box_submit(&$form, &$form_state) {
 }
 
 /**
- * Implementation of hook_form_FORM_ID_alter().
+ * Implements hook_form_FORM_ID_alter().
  * No need to check permissions since the form is already restricted.
  */
 function fbss_twitter_form_twitter_account_list_form_alter(&$form, &$form_state) {
@@ -56,7 +56,7 @@ function fbss_twitter_form_twitter_account_list_form_alter(&$form, &$form_state)
   if (!user_access('update and view own stream', $account)) {
     return;
   }
-  $result = db_query("SELECT screen_name FROM {twitter_account} WHERE uid = %d", arg(1));
+  $result = db_query("SELECT screen_name FROM {twitter_account} WHERE uid = :uid", array(':uid' => arg(1)));
   $options = array(0 => t('None'));
   while ($option = db_fetch_array($result)) {
     $options[$option['screen_name']] = $option['screen_name'];
@@ -106,7 +106,7 @@ function fbss_twitter_twitter_submit($form, &$form_state) {
 }
 
 /**
- * Implementation of hook_form_FORM_ID_alter().
+ * Implements hook_form_FORM_ID_alter().
  * @todo: Make this its own page
  */
 function fbss_twitter_form_facebook_status_admin_alter(&$form, &$form_state) {
@@ -132,9 +132,9 @@ function fbss_twitter_form_facebook_status_admin_alter(&$form, &$form_state) {
  */
 function fbss_twitter_settings_validate(&$form, &$form_state) {
   if ($form_state['values']['facebook_status_length'] > 140 && variable_get('fbss_twitter_default', 'off') != 'disallow') {
-    drupal_set_message(t('The maximum number of characters allowed in a status is set to a number above 140, and users can post status updates to Twitter.') .' '.
-      t('These settings could allow users to attempt to post messages to Twitter which are too long for Twitter to handle.') .' '.
-      t('In this situation, Facebook-style Statuses will attempt to truncate the tweet and include a link to view the full message on your site.') .' '.
+    drupal_set_message(t('The maximum number of characters allowed in a status is set to a number above 140, and users can post status updates to Twitter.') . ' ' .
+      t('These settings could allow users to attempt to post messages to Twitter which are too long for Twitter to handle.') . ' ' .
+      t('In this situation, Facebook-style Statuses will attempt to truncate the tweet and include a link to view the full message on your site.') . ' ' .
       t('Occasionally it is not possible to get a link to the status message, in which case the tweet will simply be shortened to 140 characters by Twitter.'),
       'warning');
   }
@@ -163,12 +163,12 @@ function fbss_twitter_post_to_twitter($account, $message, $sid = NULL) {
   }
   // Try to fit the message into a tweet.
   if (!empty($sid) && drupal_strlen($message) > 140) {
-    $url = url('statuses/'. $sid);
+    $url = url('statuses/' . $sid);
     if (module_exists('shorten')) {
       $url = shorten_url($url);
     }
     $url_length = drupal_strlen($url);
-    $message = drupal_substr($message, 0, 138 - $url_length) ."\xE2\x80\xA6 ". $url;
+    $message = drupal_substr($message, 0, 138 - $url_length) . "\xE2\x80\xA6 " . $url;
   }
   module_load_include('inc', 'twitter');
   $twitter_accounts = twitter_get_user_accounts($account->uid);
@@ -204,7 +204,7 @@ function _fbss_twitter_get_default($account) {
 }
 
 /**
- * Implementation of hook_facebook_status_form_ahah_alter().
+ * Implements hook_facebook_status_form_ahah_alter().
  */
 function fbss_twitter_facebook_status_form_ahah_alter(&$new_form, $form) {
   $new_form['twitter'] = $form['twitter'];
diff --git a/submodules/fbss_userpoints/fbss_userpoints.info b/submodules/fbss_userpoints/fbss_userpoints.info
index a561e41..6c84a25 100644
--- a/submodules/fbss_userpoints/fbss_userpoints.info
+++ b/submodules/fbss_userpoints/fbss_userpoints.info
@@ -3,4 +3,7 @@ description = "Integrates Userpoints with Facebook-style Statuses."
 package = Facebook-style Statuses
 dependencies[] = facebook_status
 dependencies[] = userpoints
-core = 6.x
+core = 7.x
+
+files[] = fbss_userpoints.install
+files[] = fbss_userpoints.module
diff --git a/submodules/fbss_userpoints/fbss_userpoints.install b/submodules/fbss_userpoints/fbss_userpoints.install
index ea96f76..2991491 100644
--- a/submodules/fbss_userpoints/fbss_userpoints.install
+++ b/submodules/fbss_userpoints/fbss_userpoints.install
@@ -6,7 +6,7 @@
  */
 
 /**
- * Implementation of hook_uninstall().
+ * Implements hook_uninstall().
  */
 function fbss_userpoints_uninstall() {
   variable_del('facebook_status_userpoints_other');
diff --git a/submodules/fbss_userpoints/fbss_userpoints.module b/submodules/fbss_userpoints/fbss_userpoints.module
index 21c149b..8d6ce49 100644
--- a/submodules/fbss_userpoints/fbss_userpoints.module
+++ b/submodules/fbss_userpoints/fbss_userpoints.module
@@ -6,7 +6,7 @@
  */
 
 /**
- * Implementation of hook_userpoints().
+ * Implements hook_userpoints().
  */
 function fbss_userpoints_userpoints($op, $params = array()) {
   if ($op == 'setting') {
@@ -29,7 +29,7 @@ function fbss_userpoints_userpoints($op, $params = array()) {
     $form['facebook_status']['facebook_status_userpoints_max'] = array(
       '#type' => 'textfield',
       '#title' => t('Maximum number of Userpoints from posting statuses per day'),
-      '#description' => t('Set to zero for no limit.') .' '.
+      '#description' => t('Set to zero for no limit.') . ' ' .
         t('Note that the actual number of points awarded per day could be higher than this if this value is not a multiple of the points given above.'),
       '#default_value' => variable_get('facebook_status_userpoints_max', 5),
     );
@@ -55,16 +55,15 @@ function _fbss_userpoints_validate($form, &$form_state) {
 }
 
 /**
- * Implementation of hook_facebook_status_save().
+ * Implements hook_facebook_status_save().
  */
 function fbss_userpoints_facebook_status_save($status, $context, $edit) {
   $sender = _facebook_status_user_load($status->sender);
   $recipient = $context['handler']->load_recipient($status->recipient);
-  $points_today = db_result(db_query("SELECT SUM(points) FROM {userpoints_txn}
-    WHERE uid = %d AND time_stamp > %d
-      AND (operation = 'facebook_status add own' OR operation = 'facebook_status add other')
-      AND expired = 0 AND status = 0",
-    $sender->uid, time() - 86400));
+  $points_today = db_query("SELECT SUM(points) FROM {userpoints_txn}
+    WHERE uid = :uid AND time_stamp > :time_stamp
+      AND (operation = :(operation OR operation = :operation)
+      AND expired = :expired AND status = :status", array(':uid' => $sender->uid, ':time_stamp' => REQUEST_TIME - 86400, ':(operation' => 'facebook_status add own', ':operation' => 'facebook_status add other', ':expired' => 0, ':status' => 0))->fetchField();
   if (variable_get('facebook_status_userpoints_max', 5) && $points_today > variable_get('facebook_status_userpoints_max', 5)) {
     return;
   }
@@ -76,19 +75,19 @@ function fbss_userpoints_facebook_status_save($status, $context, $edit) {
     //'entity_type' => 'facebook_status',
   );
   if ($status->sender == $status->recipient && $status->type == 'user') {
-    $params['description'] = t('!user posted a new status.', array('!user' => theme('username', $sender)));
+    $params['description'] = t('!user posted a new status.', array('!user' => theme('username', array('account' => $sender))));
     $params['points'] = variable_get('facebook_status_userpoints_own', 0);
     $params['operation'] = 'facebook_status add own';
   }
   elseif ($status->type == 'user') {
     $params['description'] = t('!sender wrote a message to !recipient',
-      array('!sender' => theme('username', $sender), '!recipient' => $context['handler']->recipient_link($recipient)));
+      array('!sender' => theme('username', array('account' => $sender)), '!recipient' => $context['handler']->recipient_link($recipient)));
     $params['points'] = variable_get('facebook_status_userpoints_other', 0);
     $params['operation'] = 'facebook_status add other';
   }
   else {
     $params['description'] = t('!sender wrote a message at !recipient',
-      array('!sender' => theme('username', $sender), '!recipient' => $context['handler']->recipient_link($recipient)));
+      array('!sender' => theme('username', array('account' => $sender)), '!recipient' => $context['handler']->recipient_link($recipient)));
     $params['points'] = variable_get('facebook_status_userpoints_other', 0);
     $params['operation'] = 'facebook_status add other';
   }
@@ -96,24 +95,24 @@ function fbss_userpoints_facebook_status_save($status, $context, $edit) {
 }
 
 /**
- * Implementation of hook_facebook_status_delete().
+ * Implements hook_facebook_status_delete().
  */
 function fbss_userpoints_facebook_status_delete($sid) {
   $status = facebook_status_load($sid);
   $sender = _facebook_status_user_load(array('uid' => $status->sender));
   global $user;
-  $result = db_fetch_object(db_query("SELECT points FROM {userpoints_txn} WHERE operation LIKE 'facebook_status add%%' AND reference = %d AND uid = %d", $sid, $sender->uid));
+  $result = db_fetch_object(db_query("SELECT points FROM {userpoints_txn} WHERE operation LIKE 'facebook_status add%%' AND reference = :reference AND uid = :uid", array(':reference' => $sid, ':uid' => $sender->uid)));
   $params = array(
     'uid' => $sender->uid,
     'points' => 0 - $result->points,
     'operation' => 'facebook_status delete',
   );
   if ($user->uid == $sender->uid) {
-    $params['description'] = t('!user deleted a status message.', array('!user' => theme('username', $user)));
+    $params['description'] = t('!user deleted a status message.', array('!user' => theme('username', array('account' => $user))));
   }
   else {
     $params['description'] = t('!user deleted a message by !sender',
-      array('!user' => theme('username', $user), '!sender' => theme('username', $sender)));
+      array('!user' => theme('username', array('account' => $user)), '!sender' => theme('username', array('account' => $sender))));
   }
   userpoints_userpointsapi($params);
 }
diff --git a/templates/facebook-status-item.tpl.php b/templates/facebook-status-item.tpl.php
index fddb7a4..af11dda 100644
--- a/templates/facebook-status-item.tpl.php
+++ b/templates/facebook-status-item.tpl.php
@@ -33,25 +33,17 @@
  * Other modules may add additional variables.
  */
 ?>
-<div id="facebook-status-item-<?php echo $sid; ?>" class="facebook-status-item facebook-status-type-<?php echo $type; ?><?php if ($self): ?> facebook-status-self-update<?php endif; ?><?php if ($page): ?> facebook-status-page<?php endif; ?>">
-  <?php if ($sender_picture): ?>
-    <div class="facebook-status-sender-picture"><?php echo $sender_picture; ?></div>
-  <?php endif; ?>
-  <span class="facebook-status-sender"><?php echo $sender_name; ?></span>
-  <?php if ($type == 'user' && !$self): ?>
-    &raquo; <span class="facebook-status-recipient"><?php echo $recipient_link; ?></span>
-  <?php endif; ?>
-  <span class="facebook-status-content"><?php echo $message; ?></span>
-  <div class="facebook-status-details">
-    <span class="facebook-status-time"><?php echo $created; ?></span>
-    <?php if ($meta): ?>
-      <span class="facebook-status-meta"><?php echo $meta; ?></span>
-    <?php endif; ?>
-    <?php if ($links): ?>
-      <div class="facebook-status-links"><?php echo $links; ?></div>
-    <?php endif; ?>
-  </div>
-  <?php if (!empty($comments)): ?>
-    <div class="facebook-status-comments"><?php echo $comments; ?></div>
-  <?php endif; ?>
-</div>
+
+<div id="facebook-status-item-
+<?php
+echo $sid;
+?>
+" class="facebook-status-item facebook-status-type-
+<?php
+echo $type;
+?>
+<?php
+if ($self) :
+?>
+ facebook-status-self-update
+<?php
diff --git a/views-view-row-rss.tpl.php b/views-view-row-rss.tpl.php
index c149121..2c13bf6 100644
--- a/views-view-row-rss.tpl.php
+++ b/views-view-row-rss.tpl.php
@@ -7,9 +7,27 @@
  * Copied from views/theme/views-view-row-rss.tpl.php.
  */
 ?>
+
   <item>
-    <title><?php print $title; ?></title>
-    <link><?php print $link; ?></link>
-    <description><?php print $description; ?></description>
-    <?php print $item_elements; ?>
+    <title>
+<?php
+print $title;
+?>
+</title>
+    <link>
+<?php
+print $link;
+?>
+</link>
+    <description>
+<?php
+print $description;
+?>
+</description>
+
+<?php
+print $item_elements;
+?>
+
   </item>
+
-- 
1.7.1

